		       Termcap Compiler Version 1.04

	             Copyright (C) 1991 Rhys Weatherley

1. INTRODUCTION

The Termcap Compiler is a tool for creating new terminal emulations for use
with UW/PC (versions 2.00 and higher).  It takes source code in the form of an
abstract assembly code and compiles them into binary terminal descriptions that
UW/PC can use to provide new types of terminal emulations.  The standard UW/PC
terminal types are included as examples of the assembly code versions of the
terminal descriptions in the files VT52.CAP, ADM31.CAP and ANSI.CAP in the
source code archive UW-SRC.ZIP.  Note that ANSI.CAP implements both an ANSI
emulation and a VT100 emulation.

A new feature to version 1.03 and higher is the ability to convert a Unix
TERMCAP or TERMINFO description of a terminal type into a .CAP file that can
then be compiled by another call to TERMCC.  This was based on a discussion with
Nelson Minar (nelson@reed.edu).  Thus, if you are having trouble getting
your Unix host to work with the built-in terminal types, then you can download
the relevant TERMCAP or TERMINFO entry and compile it into a .TRM file that
will do exactly what the Unix host wants.  That's the idea at least. :-)

2. USING THE TERMCAP COMPILER.

There are two ways to use TERMCC.  The first compiles a .CAP file into a
.TRM terminal description file, and the second converts a TERMCAP or TERMINFO
entry into a .CAP file for later editing and compilation.

In the former case, the Termcap Compiler "TERMCC" accepts assembly code from
the filename supplied as an argument and writes the resultant compiled
terminal description to the supplied output file or a file with the same
path and name as the input file, but with a ".TRM" extension.  The full
command syntax is:

	TERMCC [-t termtype] infile[.CAP] [outfile[.TRM]]

The "-t" option is used for conditional compilation of terminal types that
use the "names" instruction instead of the "name" instruction.  See the
discussion of these instructions below for more details.

In the second case, TERMCC takes three or four arguments, the first of which
must be "-c" or "-C".  It scans the file "tcapfile" for the terminal type
"termtype" and converts it into a TERMCC terminal description in the .CAP
file.  If the fourth argument is not given, then the file "termtype.CAP"
is used by default.

	TERMCC -c termtype tcapfile [capfile[.CAP]]

The "tcapfile" can be obtained from a number of sources.  The best bet is
the "/etc/termcap" file on your Unix system.  If your system uses TERMINFO
instead of TERMCAP, then the output of the "infocmp" (or "/usr/5bin/infocmp")
command can be used.  To produce the required output from "infocmp", do
one of the following at your Unix prompt:

	infocmp -I termtype >tempfile

    or	infocmp -L termtype >tempfile

where "termtype" the terminal type you wish to convert, and "tempfile" is
the name of a temporary file to place the TERMINFO entry into.  You should
download the contents of this file and pass it to TERMCC as the "tcapfile"
parameter.  If you wish to download more than one terminal type, using this
method, then you can specify more than one terminal type on "infocmp"'s
command line.  TERMCC will scan the contents of the file "tcapfile" for
the terminal type to be converted.  See the section "CONVERTING TERMINAL
TYPES" below for more information.

3. USING NEW TERMINAL DESCRIPTIONS WITH UW/PC.

This section explains how you can add terminal descriptions you have written
and compiled to UW/PC so that it will use them during communications.  This
is also explained in "UW.DOC", but is repeated here for convenience.

In the configuration file "UW.CFG" for UW/PC the following configuration
options can be specified:

	emul (default adm31)

		The default terminal emulation type to use for windows.
		When a new window is created, it will use this emulation
		type.  This can be one of adm31, vt52, or ANSI or a string
		(e.g. "vt102"), signifying a currently loaded terminal
		description that will be searched for to become the
		default emulation.  The double quotes are optional.
		When the terminal description is searched for, case is
		ignored during compares.

	emul0 (defaults to whatever emul is set to)

		Set the terminal emulation type for protocol 0.  This is
		to rectify some problems with UNIX termcap entries that
		are missing the entry for ADM31 terminals, as discussed 
		in UW.DOC under "USING UW/PC".  It can be one of adm31,
		vt52 or ansi or a string specifying a terminal type loaded
		with the "terminal" configuration option.

	terminal (no default)

		This can appear up to five times in the configuration file
		and each occurrence will load a terminal description into
		memory.  It's string value specifies a filename for a
		compiled terminal description.  The full pathname should be
		supplied.  For example, the following line could be added to
		the configuration file to add a "VT102" terminal emulation:

			terminal="c:\uw\vt102.trm"

		The standard VT52, ADM31 and ANSI terminal types can be
		replaced with new terminal descriptions by loading new
		files that have the VT52, ADM31 or ANSI terminal type
		specified.

4. THE ABSTRACT MACHINE.

UW/PC uses a small interpretive abstract machine to decode compiled terminal
descriptions on the fly while performing communications.  Its overhead is
small enough not to have a significant impact on the performance of UW/PC.
This abstract machine has a number of registers that can be accessed from
the assembly code described in the next section.

	accumulator	- This is the primary control register.  It holds
			  16 bit signed values.
	x register	- This is an auxillary register, primarily used for
			  cursor positioning during terminal emulation.  It
			  holds 16 bit signed values.
	y register	- This is an auxillary register, primarily used for
			  cursor positioning during terminal emulation.  It
			  holds 16 bit signed values.
	comparator	- After a comparison instruction, this register will
			  hold a value that is inspected during the conditional
			  jump instructions.  Its (16 bit) value cannot be
			  directly accessed.
	flags		- This is a 16 bit quantity that allows you to record
			  up to 16 single bit flags that may be useful for
			  recording such information as whether the terminal's
			  insertion mode is on or off, etc.
	saved x reg	- An auxillary register that can be used to save the
			  terminal's current X cursor co-ordinate.  It's value
			  cannot be directly accessed, except through the
			  "savexy", "restxy" and "getxy" instructions.
	saved y reg	- An auxillary register that can be used to save the
			  terminal's current Y cursor co-ordinate.  It's value
			  cannot be directly accessed, except through the
			  "savexy", "restxy" and "getxy" instructions.
	saved attribute	- An auxillary register that can be used to save the
			  terminal's current printing attribute.  It's value
			  cannot be directly accessed, except through the
			  "saveattr" and "restattr" instructions.
	argument array	- An array of eight 16-bit quantities that can be used
			  to store arguments to escape sequences for emulations
			  such as ANSI and VT102 which have variable numbers of
			  arguments for their escape sequences.
	number of args	- A 16-bit quantity that normally records how many
			  arguments are in the argument array.  It can also
			  be used as a loop counter.
	second key table- When expanding keypresses to escape sequences, UW/PC
			  looks at the code starting at the label "keys"
			  for key expansions and then looks at the code
			  starting at the label in the secondary key table
			  register.  By default, there is no secondary key
			  table.  The secondary key table register can be
			  changed with the "keytab" instruction defined below
			  and is intended for terminal emulations with more
			  than one key assignment.  e.g. VT100.

5. ASSEMBLY INSTRUCTIONS.

This section describes the format of the assembly source file, and the various
instructions that can be used to create terminal descriptions.

The source file can contain comments that begin with "//" and continue to the
end of the line (like in C++), and it must begin with a "name" instruction,
although this is not checked by the compiler.  Following the "name"
instruction, an optional "type" instruction may follow.  This declares the
number for the terminal type required by Protocol 2.  e.g.

		type	1
		type	uwtadm31

The single argument may be a number or one of the pre-defined constants
"uwtadm31", "uwtvt52", "uwtansi", "uwttek4010", "uwtftp", "uwtprint", "uwtplot"
and "uwtunknown".  These constants correspond to the values 0..6 and 127.  At
present, if the terminal type is specified as unknown (the default if no
"type" instruction is present), then UW/PC will default to using ADM31.
A second form of the "type" instruction may be used in terminal types that are
conditionally compiled with a "names" instruction:

		type	value	if	string

The meaning of this instruction is to use the given terminal type value if
the terminal type's name matches the given string.  e.g.

		type	uwtansi	if	"ANSI"

There is no fixed format for the instructions except that labels cannot
occur between an instruction's name and its arguments.  Other than that,
an instruction can appear in any way with any amount of white space and
comments surrounding its name and arguments, and any number of
instructions and labels can appear on the one line or wrapped across lines.
Despite this, it is better to only place one instruction on each line with
an optional label preceding it, as shown in the example terminal descriptions.

Labels consist of an alphanumeric identifier (that must not be an instruction
name) and a colon.  The two labels "start" and "keys" must be present in the
source file.  "start" indicates where the decoding for output to the terminal
screen begins, and "keys" indicates where the decoding of special keycodes
(for example terminal function keys) begins.  Without these labels, UW/PC
cannot process the terminal description properly.

There is one special escape sequence that EVERY terminal type MUST support:
"ESC |".  This will be used by UW/PC together with some of the upcoming
enhancements to UW/PC.  The handling for this escape sequence is to use
"getch" to retrieve the next character after the '|' and then to execute the
"client" instruction.  If a terminal description does not handle this escape
sequence in this way, then the special clients cannot be activated in
windows of that terminal type.

	add	- Adds the instruction's argument to the accumulator.
		  The argument can be numeric, "width" or "height".

	addtitle - Add the accumulator to the window's title.  This is for use
		  in escape sequences for setting titles.  See also "clrtitle"
		  and "showtitle".  The title is not displayed until a
		  "showtitle" instruction is executed.

	align	- Perform an alignment test by filling the screen with the
		  character in the accumulator.

	bell	- Ring the terminal bell.

	bs	- Move the cursor back one character.  The cursor will
		  not wrap around to the previous line if it is at the
		  start of the current line.

	bswrap	- Move the cursor back one character and wrap around to
		  the end of the previous line if necessary.  If the cursor
		  is in the top-left screen position, it won't be moved.

	clear	- Clear the entire screen to the current scrolling attribute.
		  The cursor is not moved from its current position.

	client	- This should be executed for the escape sequence ESC '|'.
		  UW/PC uses this for some of its specialised clients such
		  as the upcoming mail tool uwmail.

	clreol	- Clear to the end of the current line in the current
		  scrolling attribute.

	clreos	- Clear to the end of the screen from the current cursor
		  position in the current scrolling attribute.

	clrmap	- Clear the character mapping table.  This is used to return
		  from an alternative character set or before creating a
		  new mapping of characters with the "map" instruction.  If
		  any foreign language mappings were in force before any
		  "map" instructions, then this instruction will restore them.

	clrrgn	- Clear the current scrolling region and reset it to the full
		  screen size.  A new scrolling region may be set with the
		  "region" instruction.

	clrsol	- Clear to the start of the current line in the current
		  scrolling attribute.  The current cursor position is
		  also cleared.

	clrsos	- Clear to the start of the screen from the current
		  cursor position in the current scrolling attribute.
		  The current cursor position is also cleared.

	clrtabs	- Clear all tabstops.

	clrtitle - Clear the window's title.  The title is not displayed until
		  a "showtitle" instruction is executed.

	copyattr - Copy the current printing attribute into the current
		  scrolling attribute.  This is for use on terminals that
		  change both attributes at the same time.

	cmp	- Compares the instruction's argument to the accumulator.
		  The argument can be numeric, "width" or "height".  The
		  comparator will be set to reflect the result of the
		  comparison.

	cr	- Move the cursor to the start of the current line.

	dec	- Decrement the number of arguments and compare it with zero,
		  putting the result of the comparison into the comparator.

	deftabs - Clear all tab stops and set default tab stops every 8
		  screen positions.

	delchar	- Delete the character at the current screen position,
		  moving all following characters left one place and
		  clearing the last position on the line in the current
		  scrolling attribute.

	delline	- Delete the current line and scroll the screen up.

	endkeys	- Marks the end of the key definition table.

	escape	- Unused at present - takes a numeric argument and specifies
		  and index to use in an "escape" table which isn't currently
		  implemented.  This is a convenient way to extend the
		  language without changing the TERMCC program - only the
		  main UW/PC program needs to be modified to recognise the
		  escape sequences.  It is suggested that you do not use
		  this because it may change in different versions of the
		  program, but is handy for "quick hacks".

	geta	- Gets an argument from the argument array.  This instruction's
		  first argument (1..8) specifies the argument to get and its
		  second argument specifies an 8-bit default value to use if
		  the argument in the argument array is not set.  The second
		  argument can also be either "width" or "height" for the
		  screen dimensions.

	getarg	- Gets an argument from the remote host.  It is assumed to
		  be the ASCII representation of a number.  The number will
		  be placed into the next argument position and the
		  accumulator will return the character that follows the
		  number in the stream from the remote host.

	getch	- This instruction will wait until the next character is
		  received from the remote host, which it will place into
		  the accumulator, and then it will continue execution.

	getchg	- Same as "getch", except that if a character with a code >= 32
		  is received, then a "send" instruction is implicitly
		  executed, and control returns to the "getchg" instruction
		  again.  This behaviour gives faster character turnaround
		  on graphic characters.  If the code is less than 32, then
		  control passes to the next instruction after the "getchg".

	getchg52 - Same as "getchg" except that "send52" is executed for
		  graphic characters.

	getchgi	- Same as "getchg", except that the single argument specifies
		  a bit in the flags register to be tested.  If the bit is
		  non-zero, then an "inschar" instruction is executed instead
		  of the usual "send".  The bit is intended to be set whenever
		  the terminal is in "insert mode".

	getchgi52 - Same as "getchgi", but uses "send52" instead of "send".

	getchgs	- Same as "getchg", except that the single argument specifies
		  a bit in the flags register to be tested.  If the bit is
		  non-zero, then a "send52" instruction is done, instead of
		  the default "send".  This is intended for terminal emulations
		  that can change their end of line character behaviour, or
		  which emulate more than one similar terminal type, with
		  different end of line behaviours.

	getchgsi - Same as "getchgs", except that there are two arguments.  The
		  first is the bit for "send/send52" as described above for
		  "getchgs", and the second is the bit for the insertion mode,
		  as described above fore "getchgi".

	getx	- Get the value of the X register and place it into the
		  accumulator.

	getxy	- Get the current cursor position and place it into the
		  X and Y registers.  This is mainly used to get a cursor
		  position prior to moving it about the screen.

	gety	- Get the value of the Y register and place it into the
		  accumulator.

        insblank - Insert a blank character without moving the cursor.

	inschar	- Insert the accumulator at the current screen position,
		  moving all present characters one position to the right.
		  If an insertion is performed at the right-most position,
		  then this instruction has the same effect as "send".

	insline	- Insert a new blank line before the current screen line.

	ja	- Jump to the label given as an argument if the result of
		  the last comparison using "cmp" was that the accumulator
		  was above (greater than) the comparison value.

	jae	- Jump to the label given as an argument if the result of
		  the last comparison using "cmp" was that the accumulator
		  was greater than or equal to the comparison value.

	jb	- Jump to the label given as an argument if the result of
		  the last comparison using "cmp" was that the accumulator
		  was below (less than) the comparison value.

	jbe	- Jump to the label given as an argument if the result of
		  the last comparison using "cmp" was that the accumulator
		  was less than or equal to the comparison value.

	je	- Jump to the label given as an argument if the result of
		  the last comparison using "cmp" was that the accumulator
		  was equal to the comparison value.

	jne	- Jump to the label given as an argument if the result of
		  the last comparison using "cmp" was that the accumulator
		  was not equal to the comparison value.

	jmp	- Jump unconditionally to the label given as an argument.

	jmpkeys	- This is for use in a key translation table only.  It's
		  argument specifies a label to jump to if a key hasn't
		  been matched when this instruction has been reached.

	jsr	- Jump to a subroutine at the label given as an argument.
		  Subroutines can only be nested up to 10 levels deep.  If
		  you go any deeper, it is not checked (for speed) and
		  strange things may occur.

	key	- Takes two arguments separated by a comma.  The first is
		  an IBM keyboard scan code indicating a key to be mapped
		  to the second argument which is a string of characters to
		  be sent to the remote host when that key is pressed.  Use
		  this to define the characters to send for arrow and function
		  keys in a terminal emulation.  It is assumed that the
		  label "keys" is followed by zero or more "key" instructions
		  and terminated with an "endkeys" instruction so that UW/PC
		  can find the key definitions.  No other instructions must
		  appear in the "keys" section otherwise strange things may
		  happen.

	keytab	- Change the address of the secondary key table.  If the
		  argument is a label, it indicates where the secondary key
		  table starts, and if the argument is "none", then the
		  secondary key table is disabled.  The code at the label
		  given as an argument must consist of zero of more "key"
		  instructions followed by an "endkeys" instruction.  Otherwise
		  strange things may happen.

	load	- Loads the instruction's argument into the accumulator.
		  The argument can be numeric, "width" or "height".

	lf	- Move the cursor down one line on the screen, staying
		  in the same column.  At the bottom of the screen, the
		  screen is scrolled up one line.

	map	- Changes the printable mapping of an output character.
		  This instruction takes two arguments, separated by a comma:
		  the original character and the new character to map to. e.g.

		  	map	'j',217
			map	'k',191
			map	'l',218
			map	'm',192

		  This instruction is normally used to construct alternative
		  character sets in some emulations, notably VT100.  The
		  "clrmap" instruction will return to the default mappings.

	move	- Move the cursor to the position denoted by the X and Y
		  registers.  The screen origin is at (0,0).  If the
		  position is off-screen, the cursor is not moved.

	moved	- Move down the number of lines specified in the accumulator.
		  Does not scroll when the bottom of the screen is reached.

	moveh	- Move the cursor to the home position (0,0).

	movel	- Move left the number of positions specified in the
		  accumulator.  Does not wrap to previous lines.

	mover	- Move right the number of positions specified in the
		  accumulator.  Does not wrap to the next line.

	moverel	- Move the cursor relative to its current position by the
		  amount specified by the X and Y registers.  If the
		  destination is off-screen, then it will stop at the
		  screen boundary.

	moveu	- Move up the number of lines specified in the accumulator.
		  Does not scroll when the top of the screen is reached.

	name	- Takes a string argument that specifies the name of the
		  terminal emulation.  This must be the first instruction
		  in the terminal description, but this is not checked.

	namech	- Takes a single numeric argument which indicates the character
		  from the terminal type's name to be extracted.  e.g. if
		  the .CAP file began with the following instruction:

			name	"ANSI"

		  and "namech 0" was executed, then 'A' will be loaded into
		  the accumulator.  Note that this instruction is optimised
		  into a "load" instruction at compile-time, so indexing off
		  the end of a terminal type name will produce whatever
		  garbage was around in the TERMCC compiler, rather than in
		  the terminal description.  Usually it is just necessary to
		  get the first or second characters to determine which
		  terminal type is active when a "names" instruction has been
		  supplied for conditional compilation.

	names	- A more generalised form of the "name" instruction.  It
		  takes a comma-separated list of terminal names and
		  labels, enclosed in square brackets.  If a "-t" option
		  was supplied on the TERMCC command-line, then the name
		  that was supplied will be the one chosen from the list
		  of names.  In this way it is possible to use the one
		  .CAP file to generate descriptions for more that one
		  terminal type.  The labels point to the start of the
		  default key translation table for that terminal type. e.g.

		  	names	[["ANSI",keys],["VT100",vt100keys]]

		  Thus, the instruction "name str" is functionally equivalent
		  to the extended instruction "names [[str,keys]]".  The
		  "namech" instruction may be used to help determine which
		  terminal type is in use at run-time.  For example, if
		  "-t vt100" was supplied on the TERMCC command-line, and
		  the instruction "namech 0" was executed, then the
		  accumulator would get the value 'V'.  If however, that
		  command-line option was not present (or was "-t ansi"),
		  then the accumulator would get the value 'A'.  This value
		  can be subsequently tested to determine what emulation
		  is currently active.

	region	- Set the scrolling region to start at the value in the X
		  register and end at the value in the Y register.  The
		  cursor is not moved, and printing outside the region will
		  produce mixed results (since Unix programs I know of
		  do print outside the region, there shouldn't be anything
		  to worry about).  If Y is less than X then a single-line
		  region at X is set.  If either value is off-screen, then
		  it will be truncated to the screen boundaries.

	remnum	- Send the value in the accumulator as a 1-3 digit decimal
		  value to the remote host.

	remote	- Send the value in the accumulator to the remote host.

	remstr	- Takes a single string argument and sends that string to
		  the remote host.

	restattr - Restore the current printing attribute that was saved
		  by using "saveattr".

	resarr	- Resets the argument array.  All arguments will be marked
		  as "default value", the argument counter will be set
		  to zero, and the "shift" instruction value will be set
		  to zero.

	reset	- Takes a numeric argument which is a number between 0 and
		  15 that indicates a bit in the flags register to be reset.

	restab	- Reset any tabstop at the current screen x position.

	restxy	- Restore the current cursor position from the saved X and
		  Y registers.  The values may be saved by the "savexy"
		  instruction.

	ret	- Return from the current subroutine.  If you go up past
		  the first return address on the return stack then it
		  is not checked (for speed) and strange things may occur.

	revlf	- Move the cursor up one line on the screen, staying
		  in the same column.  At the top of the screen, the
		  screen is scrolled up down line.

	saveattr - Save the current printing attribute so it can be later
		  restored using "restattr".

	savexy	- Save the current cursor position in the saved X and Y
		  registers.  The values may be restored by the "restxy"
		  instruction.

	scrldn	- Scroll the entire screen down one line, leaving the cursor
		  at its current position and filling the top line in
		  the scrolling attribute.

	scrlup	- Scroll the entire screen up one line, leaving the cursor
		  at its current position and filling the bottom line in
		  the scrolling attribute.

	send	- Send the accumulator to the screen.  When the cursor
		  reaches the right-hand side of the screen, it will
		  automatically wrap to the start of the next line, and
		  will scroll the screen as necessary.

	send52	- Send the accumulator to the screen.  When the cursor
		  reaches the right-hand side of the screen, it will
		  stay at that position until the next invocation of
		  "send" or "send52".  It got this name because this is
		  what the VT52 terminal type does.

	set	- Takes a numeric argument which is a number between 0 and
		  15 that indicates a bit in the flags register to be set.

	setattr	- Set the current printing attribute.  If a numeric
		  argument is supplied then the attribute is set from
		  the global attribute table (see below).  Otherwise,
		  the current accumulator value is used as the attribute.
		  The indexes into the global attribute table are:

		  	0 - Normal printing attribute.
			1 - Inverse printing attribute.
			2 - Highlighting attribute - usually "bold".
			3 - Normal attribute on the status line.
			4 - Highlighting attribute for the status line.

	setbold	- Set the bold bit on in the current printing attribute.

	setboldoff - Turn off the bold bit in the current printing attribute.

	setblink - Set the blinking bit on in the current printing attribute.

	setblinkoff - Turn off the blinking bit in the current printing
		  attribute.

	setc	- Set the number of arguments directly from the accumulator.
		  This is useful to use the number of arguments register as
		  a counter in loops, decrementing it with "dec" each time
		  through a loop.  The argument array is not modified, and
		  "geta" and "shift" can still be used to step through the
		  array to get the arguments.

	setscrl	- Set the current scrolling attribute.  If a numeric
		  argument is supplied then the attribute is set from
		  the global attribute table (see above).  Otherwise,
		  the current accumulator value is used as the attribute.

	settab	- Place a tabstop at the current screen x position.

	setx	- Places the value of the accumulator in the X register.

	sety	- Places the value of the accumulator in the Y register.

	shift	- Shift the arguments back one.  Using a "geta" instruction
		  after this instruction will get the "n + 1"th argument.
		  e.g. in "geta 1,1 shift geta 1,1", the second "geta"
		  instruction will get the argument following the first.
		  The "resarr" instruction will move everything back to the
		  start of the argument array.

	showtitle - Display the window's title, as set by "clrtitle" and
		  "addtitle".

	sub	- Subtracts the instruction's argument from the accumulator.
		  The argument can be numeric, "width" or "height".

	switch	- Extended comparison instruction that ends with "endsw".
		  Between "switch" and "endsw" are placed value and
		  jump label pairs.  For example:

			switch
			  0x00,start
			  '\r',crproc
			  '\n',lfproc
			  '\b',bsproc
			  '\t',tabproc
			  0x07,bellproc
			  0x1B,escproc
			endsw

		  The "switch" instruction will try to match each value
		  against the accumulator in turn, and will jump to the
		  associated label of the first matching value.  If no
		  values match, then execution will continue after the
		  "endsw" instruction.  A special comparison that can be
		  used in a "switch" instruction is the "digit test". e.g.

		  	switch
			  'A',aproc
			  'B',bproc
			  digit,digproc
			  'Z',zproc
			endsw

		  The "digit" case will match any of the decimal digits
		  '0' through '9'.

	tab	- Move the cursor to the next tabstop.  Tabstops are
		  placed every 8 characters, and the cursor will wrap to
		  the start of the next line and will scroll the screen
		  as necessary.

	tabnd	- Same as "tab", but this version doesn't use spaces
		  to do the tabbing.  i.e. it is a non-destructive tab.

	test	- Takes a numeric argument which is a number between 0 and
		  15 that indicates a bit in the flags register to be tested.
		  The comparator is set to a non-zero value if the flag bit
		  is set, and zero if it is reset.  The comparator can then
		  be tested with "je" (for reset) and "jne" (for set).

	type	- Set the Protocol 2 terminal type, as described above.

You should look at the standard VT52, ADM31 and ANSI terminal types that come
with the UW/PC source code for more information on how to write terminal
descriptions.  Please report any bugs or enhancements to the author.

6. CONVERTING TERMINAL TYPES.

7. FUTURE WORK.

The terminal type conversion is nowhere near complete as yet.  There are still
many sequences that aren't understood, either because I haven't implemented
the TERMCC instructions for them yet, or because the IBM-PC does not have the
ability to support those sequences.  Any such sequences are reported as
warnings when TERMCC is run, so if there are some sequences that you
desperately need and TERMCC is unable to convert them, then please let me
know what they are, and what they are supposed to do.  If you wish, you can
send me the contents of your Unix system's /etc/termcap file, or selected
TERMINFO entries.  This will allow me to build up a library of terminal
types and be able to fine-tune the conversion process in future.
