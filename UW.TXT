			    UW/PC Version 2.01

			     Rhys Weatherley

			        March 1991

1. INTRODUCTION

This is version 2.01 of UW/PC, a multiple-window interface to UNIX for
IBM-PC's and compatible computers.  This program is based on a program
written for the Macintosh by John Bruner.  It provides up to seven
separate login sessions on the remote UNIX machine, and requires the
UW server to be running on the UNIX host.  Before UW/PC can be used in
a multiple session mode, the server must be compiled and installed on
the UNIX machine.

The source code for the server, together with the Macintosh program
binaries can be found on many ftp archive sites.  The standard server
distribution is available in the directory "info-mac/unix" on
"sumex-aim.standford.edu" [36.44.0.6].  The files are named 
"uw-42-part1.shar" ... "uw-42-part8.shar".  In Australia, the UW server
can be found in the directory "info-mac/unix" on "ditmela.mel.dit.csiro.au"
[128.250.90.81].  A copy of the server source code without the Macintosh
program binaries is included in this release.  For those of you who have
previously compiled the server, there has been no change at all to the
server code.

Version 2.01 of UW/PC is a total rewrite of the previous public release
(1.05) in C++ to give a better program structure for the upcoming enhancements
to UW/PC.  Comments are invited to the author.  This version implements the
Unix Windows protocols 0 and 1.  Protocol 2 (with more control over window
management) is going to be supported in an upcoming Windows 3.0 version,
however some small parts of Protocol 2 are present in this version which make
Protocol 1 start faster.  Protocol 2 is not fully supported in the DOS
versions because of the complexity of the windowing code that is necessary.

There are now many more configuration options, so even if you have used UW/PC
before, I suggest that you read the section "CONFIGURING UW/PC" later in this
documentation.  If you wish to use the new ANSI terminal emulation option,
then you should read the discussion on terminal types in the section "USING
UW/PC" below.  This version includes a terminal emulation compiler for
creating new terminal types using a small assembly-code like language.  It
is described in the file TERMCC.DOC, but will not be required for most users -
just those who want to write their own terminal types.

UW/PC is distributed under the terms of the GNU General Public License
(version 1), a copy of which is included.  Note however that the server
is NOT covered under this license and comes under the terms and conditions
contained within its documentation.  Also, please note that I am not
affiliated with the Free Software Foundation in any way, and that further
releases of this program may not have source code included or be distributed
under the GNU General Public License, but probably will.

Comments about UW/PC can be sent to the author (me) at the e-mail
address rhys.weatherley@gmail.com.

2. FILES

The following files should be present in the UW/PC distribution:

	COPYING		A copy of the GNU General Public License.
	UW.EXE		The actual UW/PC program itself.
	UW.DOC		This documentation file.
	UWEG.CFG	An example configuration file - rename to
			UW.CFG to use this file.
	TERMCC.EXE	A compiler for creating new terminal types.
	TERMCC.DOC	Documentation for TERMCC.EXE.
	SETMODE.COM	A useful screen mode setting utility.
	HISTORY		History of UW/PC versions.
	UW-SRC.ZIP	The source code for UW/PC and TERMCC.
	UWSERVER.TAR	The source code for the UNIX server.

SETMODE was included to assist with configuration of the screen colours
(see "CONFIGURING UW/PC" later).  The Macintosh binaries have been stripped
from the server, and can be obtained from one of the FTP sites mentioned
above if desired.  The source code in UWSERVER.TAR should be compiled on
the UNIX host to allow the full multi-window potential of UW/PC to be used.

3. READ THIS IF YOU ARE HAVING TROUBLE

If you are having trouble getting UW/PC to go, especially with the UW server
program, then exit UW/PC and start it again with the "-debug" option.
i.e. "uw -debug".  Then, every character that is sent from the remote machine
will be placed into the file "UWDEBUG.OUT" in the current directory.  Upload
this file to the UNIX machine in binary mode (in some way), uuencode it and
send it to me via e-mail.  This will help me to know EXACTLY what you are
doing, and so I may be able to find the bugs more easily.

On some systems, the server will abort when it is started with a message like
"no ttys".  If this happens, recompile the server after modifying the
Makefile to compile using BSD4.2 instead of BSD4.3 and play with the
compilation options.  This is discussed in the Makefile for the server.

4. USING UW/PC

When UW/PC starts, it initialises the screen and serial port, and then
enters "Protocol 0", which is equivalent to the dumb terminal emulations
available in conventional communications programs.  The default emulation
is ADM31, but VT52 and ANSI emulations are also available.  A number of
special keystrokes are defined in protocol 0:

	ALT-B - Send a line break over the serial link.  CTRL-BREAK and
		CTRL-END will also send a line break.
	ALT-C - Start a "cut" operation.  You can select a region in
		the current window to cut and place in the clipboard.
		Press RETURN at each corner and ESC to quit.  You can
		also use the mouse to select a region of the current
		window.  Press down and hold the left mouse button at
		one corner of the region and release it at the other
		corner.  This will only work if the mouse is enabled.
		See "CONFIGURING UW/PC" below.
	ALT-D - Send the string defined by the "dial" configuration
		variable to the modem.  See "CONFIGURING UW/PC" below.
	ALT-H - Hangup the modem, by first dropping the DTR signal,
		and then sending the hangup string if the carrier
		signal is still present.
	ALT-I - Send the modem initialisation string, even if a
		carrier signal is present.
	ALT-J - Jump to a DOS shell.  Type "EXIT" at the DOS prompt to
		return to UW/PC.
	ALT-L - Start and stop an ASCII capture.  You will be prompted
		for a file name to store all data coming from the remote
		host in until you press ALT-L again.  If you have the
		status line set to display the terminal type then it
		will change to "CAP" while the capture is in effect.
	ALT-P - Paste the contents of the clipboard into the current
		window.  If a paste is currently active in another
		window then the paste will be ignored.  After every line
		is sent to the remote host a 10ms pause will be made
		to allow the remote host to catch up.  You can also press
		the right mouse button to start a paste if the mouse
		is enabled.
	ALT-R - Receive a file from the remote host.  See UPLOADS AND
		DOWNLOADS below.
	ALT-S - Send the contents of a file to the remote host.  See
		UPLOADS AND DOWNLOADS below.
	ALT-T - Send a string of the form "stty rows N columns M" to the
		remote host.  This is useful for resetting the remote
		host's idea of what the current window size is.  Sometimes
		Unix systems get confused as to the size of a terminal
		type (usually 80x24 in UW/PC), and so this command will
		send an "stty" command-line to correct it.
	ALT-U - Send the string defined by the "uw" configuration
		variable.  This is useful once connected to start the
		UW server on the UNIX host.  See "CONFIGURING UW/PC"
		below.
	ALT-X - Exit the program.  If any windows are present, they
		will be destroyed.  This function does NOT hangup
		the modem before exiting, so UW/PC can be restarted
		in protocol 0 and connected to the remote host if required.
	ALT-Q - Quit the program: same as ALT-X.
	ALT-Z - Popup a small box containing descriptions of the
		special keystrokes.  Press any key to resume.

Protocol 0 exists to allow you to connect to the UNIX host in whatever
way the host requires.  When you are ready to use the multi-window mode
of UW/PC, execute the UW server on the remote host by typing its command
name, or by pressing ALT-U if the "uw" configuration variable has been
set correctly (see below).  Note that the server must be compiled and
accessible for you to do this.

The UW server sends a special control sequence which UW/PC interprets
and then automatically starts the multi-window session.  By default the
server will also create a terminal window.  See the documentation that
accompanies the server for information on modifying its startup behaviour.
Once UW/PC has entered the multi-window session (protocol 1), up to 7
windows can be created, ALT-U no longer has any effect, and the following
additional special keystrokes are defined:

	ALT-E - Exit the UW session and return to protocol 0.
		A "kill window" request will be sent for all currently
		active windows.
	ALT-K - Kill the current window.
	ALT-N - Create a new window if possible.  Up to 7 windows
		may be created and used.  The status line will indicate
		which windows are currently active if you have set it
		correctly.  (See "CONFIGURING UW/PC" below).
	ALT-W - Cycle to the next window.  e.g. if you are in window 3,
		then you will cycle to the next highest numbered window,
		cycling back to 1 if necessary.  This is useful to quickly
		switch between windows.  ALT-0 may also be used for this.
	ALT-n - "n" is a digit between 1 and 7.  These keystrokes
		direct UW/PC to "jump" to the nominated window.

Usually, if you exit a UNIX shell in a window, that window will be killed
automatically, and when all windows have been killed, the UW session will
terminate, returning you to protocol 0.  If protocol 1 does not exit, then
you can try some of the procedures given in the "LIMITATIONS" section
later in this document.

The UW server usually defaults to using ADM31 emulation whenever it creates
a new window.  You may need to manually modify the UNIX terminal type in the
windows to get the correct screen behaviour if you have set your default
emulation type to something other than ADM31 in the configuration file.
If you are using the Korn shell "ksh", you can add the following lines to
your ".kshrc" file to automatically change the terminal type to XXX, where
XXX is your preferred terminal type.

		case $TERM in
		  adm31) TERM=XXX export TERM ;;
		  *) ;;
		esac

Some UNIX termcap entries do not have the entry for the ADM31 terminal type,
and so some UNIX programs may not have the correct screen behaviour.  The
UW server will set the TERMCAP environment variable within a UW session
window, but in protocol 0 this environment variable is not set automatically.
To use ADM31 emulation in protocol 0 on machines without the correct termcap
entry, set the TERMCAP environment variable to the following string (newlines
are for layout only, and shouldn't appear in the actual value):

	adm31:cr=^M:do=^J:nl=^J:al=\EE:am:le=^H:bs:ce=\ET:
	cm=\E=%+ %+ :cl=^Z:cd=\EY:co#80:dc=\EW:dl=\ER:
	ei=\Er:ho=^^:im=\Eq:li#24:mi:nd=^L:up=^K:MT:km:so=\EG1:se=\EG0:

Alternatively, setting the "emul0" configuration variable to "vt52" or "ansi"
will allow you to use VT52 or ANSI emulation in protocol 0, which are usually
defined in all termcap and terminfo entries.  ADM31 emulation will still be
used for UW session windows if the "emul" variable is set to "adm31".  ADM31
emulation is much "smarter" than VT52, so you will probably want to use
it wherever possible.  ANSI emulation is also available and this is much
smarter than ADM31, but because the UW server defaults to ADM31, you
may still want to use it instead of ANSI.

If you do want to use the ANSI emulation mode and the "ansi" termcap on your
Unix host is "brain-dead" (i.e. it doesn't support very much), then you
can set the TERMCAP variable to the following value to get a smarter ANSI
emulation:

	ansi:am:bs:pt:co#80:li#24:kn#3:
        	:AL=\E[%dL:DL=\E[%dM:DO=\E[%dB:IC=\E[%d@:LE=\E[%dD:
        	:RI=\E[%dC:UP=\E[%dA:al=\E[L:bt=\E[Z:cd=\E[J:ce=\E[K:
        	:cl=\E[H\E[J:cm=\E[%i%d;%dH:ct=\E[2g:
        	:dc=\E[P:dl=\E[M:ho=\E[H:ic=\E[@:kb=\b:kd=\E[B:
        	:kh=\E[H:kl=\E[D:kr=\E[C:ku=\E[A:nd=\E[C:
        	:se=\E[m:so=\E[7m:st=\EH:ue=\E[m:up=\E[A:us=\E[4m:
        	:k1=\EOP:k2=\EOQ:k3=\EOR:k4=\EOS:

To find out if the "ansi" termcap on your computer is "brain-dead", search
the file "/etc/termcap" on the Unix host for the string "|ansi|" and if it
only has a couple of lines listed before the next entry, then it is
"brain-dead".  If there are 5 or more lines, then most likely your "ansi"
termcap is OK.  Ask a local guru if you are unsure.  TERMCAP and TERMINFO
gurus may want to play around with the various ANSI, VT100 and VT102
compatible terminal types, etc to try and find something that has lots of
features for working with editors such as emacs, etc.  See the ANSI.CAP file
in the source archive and the documentation for TERMCC for more information
on the capabilities of UW/PC's ANSI emulation.  Any suggestions (no matter
how nasty :-) on the ANSI emulation are welcome.

Adding the following lines to your ".kshrc" file is the best way to make sure
that ANSI emulation is always correctly used in Protocol 1.  You can also use
ANSI emulation in Protocol 0 if you desire.

  case $TERM in
    adm31) TERM=ansi export TERM ;;
    *) ;;
  esac
  TERMCAP='ansi:  *** the ANSI string given above ***  ' export TERMCAP

All of the special protocol 0 keystrokes except ALT-U also work in protocol
1, but it is inadvisable to use ALT-I during a UW session.  ALT-H will still
hangup the modem, after exiting the UW session.  ALT-B will first exit
any active UW session before sending the BREAK pulse.  This avoids some
strange things that may occur with network terminal servers and the like.
ALT-X will also terminate a UW session before exiting UW/PC.

5. UPLOADS AND DOWNLOADS

UW/PC has ASCII and XMODEM file transfers built-in and it can also use the
program DSZ (which you need to obtain separately) to perform ZMODEM transfers.
ZMODEM file transfers are disabled in protocol 1 (the multi-window mode)
because DSZ is incompatible with the UW protocol.  It should be noted however,
that because of deficencies in the UW server, you probably won't be able to
run more than one XMODEM transfer at the same time.  This stems from the
fact that if a lot of input or output is appearing in one window then all
other windows will grind to a halt.  Except in the case of a ZMODEM receive,
you will be prompted for the filename of the file to be transfered.  To use
DSZ for ZMODEM transfers, you will need to have DSZ.COM somewhere in your
PATH for it to be accessible.  Note that the DSZ command "ALT-N" will allow
you to "nuke" a transfer and return to UW/PC if something goes wrong.

ASCII uploads will the send the contents of the text file to the remote
machine, pausing 10 milliseconds between lines to allow the remote machine
to catch up.  You need to make provisions for capturing the data at the
other end.  Usually you can do this by executing the UNIX command
"cat >filename" before you start the transfer, where "filename" is the
file you want the data to end up in.  Once the transfer is complete, you
can press CTRL-D to end the "cat" command's processing.  Pressing ESC will
abort the transfer - all other keys will be processed as normal.

ASCII downloads consist of placing all incoming data from the remote host
into the nominated file.  Pressing ESC will abort the transfer, and all
other keys are processed as normal.  Usually you type in "cat filename" at
the UNIX command line (but don't press RETURN yet), start the ASCII download,
and then press RETURN to start it going.  Once it has finished you press
ESC to abort the reception of characters.  ASCII capture (ALT-L) is similar
to ASCII download, except ALT-L is used to abort the transfer.

For XMODEM and ZMODEM transfers, you will need the "sx", "rx", "sz" and "rz"
programs for UNIX compiled and available.  Read the manuals for these programs
to get more information on their options.  For downloads, start the "sx" or
"sz" programs on the remote machine and then press "ALT-R" to start the
reception of the files.  Note that unlike some other communications programs,
the ZMODEM "auto-download-start" command sequence is not recognised, and
so you need to manually start the download.  For uploads, start the "rx" or
"rz" programs on the remote machine and then press "ALT-S" to the start
sending the nominated files.

In the near future, UW/PC will be upgraded with a mini-FTP protocol that will
allow you to transfer files between the remote machine and your PC using
FTP-like commands.  This protocol will be more "aware" of the problems of
performing multiple transfers when more than one window is active and will
get around some other problems with transmission mediums that do not accept
some characters.

6. USING UW/PC WITH OTHER PROGRAMS

UW/PC can be used as a stand-alone communciations program, or in
conjunction with some other communciations program.  If you have a
faviourite communications program (e.g. Telix, Procomm, MS-Kermit, etc),
and have extensive "scripts", etc to connect you to a UNIX host, and
still want to use these functions, you can still do so.  Once connected
to the UNIX host (or whenever you are ready), you can shell out to a DOS
shell (a function available in most programs), and execute UW/PC to
handle the UW sessions.  Note that you must execute the UW server from
within the control of UW/PC otherwise the startup control sequence that
the server sends to UW/PC may be missed.  You can exit UW/PC at any time to
return to the other program.  It may also be possible for your program's
scripting language to automatically execute the UW/PC program once a
UNIX host connection has been made.

7. CONFIGURING UW/PC

When UW/PC starts up, it first inspects the file "UW.CFG" in the current
directory, and if that doesn't exist, the file "UW.CFG" in the directory
the program was loaded from.  This plain ASCII text file is expected to
contain configuration parameters for UW/PC.  If it is not found, defaults
will be chosen for all parameters.  An example configuration file is
distributed with UW/PC.  Each line of the file is of the form "name=arg"
where "name" is the name of the configurable parameter, and "arg" is its
argument.  Comments may be introduced starting with "#", but may not
appear within commands.  The configurable parameters, which are all
optional, and their defaults follow:

	address (defaults are the normal COM port addresses)

		This option allows you to change the hardware port address
		to use for communication on the port specified by the "port"
		configuration option.  This option's value can be specified
		in decimal, octal (prefixed with '0') or hexadecimal (prefixed
		with '0x') and should appear after the "port" option if that
		is supplied.  The defaults for each of the four COM ports
		are 0x3F8, 0x2F8, 0x3E8 and 0x2E8 respectively.

	baud (default 2400)

		The baud rate to use for transmission.  This can be
		one of 110, 150, 300, 600, 1200, 2400, 4800, 9600,
		19200, 38400 or 57600.

	beep (default on)

		Enable or disable the terminal beep.  This can be either
		on or off.

	bits (default 8)

		The number of data bits (7 or 8) to use for transmission.

	cinit (default yes)

		Indicates whether or not the initialisation string should
		be sent if the carrier already exists.  This can be either
		yes or no.  When using UW/PC with other programs (see
		above), it is useful to set this to "no" to prevent the
		initialisation string being sent to the UNIX host once
		connected.

	colhighlight (default is screen mode dependent)

		This numeric option specifies the screen attribute to
		use for the highlighted printing characters (e.g. bold).
		Setting this to 0 will make UW/PC use the default attribute
		which depends on the screen mode in use.

	colhighstatus (default is screen mode dependent)

		This numeric option specifies the screen attribute to
		use for the highlighted printing characters on the status line.
		Setting this to 0 will make UW/PC use the default attribute
		which depends on the screen mode in use.

	colinverse (default is screen mode dependent)

		This numeric option specifies the screen attribute to
		use for the inverse printing characters.  Setting this to
		0 will make UW/PC use the default attribute which depends
		on the screen mode in use.

	colnormal (default is screen mode dependent)

		This numeric option specifies the screen attribute to
		use for the normal printing characters.  Setting this to
		0 will make UW/PC use the default attribute which depends
		on the screen mode in use.

	colstatus (default is screen mode dependent)

		This numeric option specifies the screen attribute to
		use for the normal printing characters on the status line.
		Setting this to 0 will make UW/PC use the default attribute
		which depends on the screen mode in use.

	cursor (default is underline)

		This option specifies the shape of the cursor to be used on
		the screen.  It can be underline, halfheight or fullheight.
		This is very useful if you run UW/PC in a DOS window in
		Windows 3.0 386 enhanced mode because the underline cursor
		is very hard to see.

	dial (default "ATDT")

		This string is sent to the modem when ALT-D is pressed,
		as a shortcut for dialing.  You can modify this string to
		contain a phone number if you wish.  e.g. "ATDP1234567^M"
		will dial the number 1234567 using pulse dialing on a
		Hayes compatible modem when ALT-D is pressed.  The string
		cannot be longer than 100 characters in length.

	disable (default no)

		This option allows you to completely turn off the handling
		of the special UW server codes that UW/PC processes.  This
		allows you to use UW/PC as a completely stand-alone comms
		program with no interference from the UW protocol.  This
		option can be either yes or no.  Note that you cannot use
		the multi-window mode of UW/PC if this is set to 'yes'.

	emul (default adm31)

		The default terminal emulation type to use for windows.
		When a new window is created, it will use this emulation
		type.  This can be one of adm31, vt52, or ansi or a string
		(e.g. "vt102"), signifying a currently loaded terminal
		description that will be searched for to become the
		default emulation.  The double quotes are optional.
		When the terminal description is searched for, case is
		ignored during compares.

	emul0 (defaults to whatever emul is set to)

		Set the terminal emulation type for protocol 0.  This is
		to rectify some problems with UNIX termcap entries that
		are missing the entry for ADM31 terminals, as discussed 
		above under "USING UW/PC".  It can be one of adm31, vt52
		or ansi or a string specifying a terminal type loaded
		with the "terminal" configuration option.

	F1 - F10 (default undefined)

		These ten configuration variables allow you to define
		the function keys to any strings you desire.  If you do
		not define a function key, it will have its default setting
		as defined by the terminal emulation in use.  The character
		"^" is a control code prefix.  e.g. "^M" corresponds to
		the CTRL-M character.  "~" indicates a 1/2 second pause and
		"#" outputs the next character directly, so that "#^" is
		the character "^" ("#~" and "##" are similar), EXCEPT when
		the next character is alphabetic.  In that case, if the
		character is "x", then ALT-x is taken as the next character.
		In this way, you could define F10 to "#Xy" to always exit
		UW/PC without needing to answer the Yes/No question.  Defining
		a function key to an empty string will also cause the
		default behaviour to be taken.  The strings cannot be
		longer than 100 characters in length.

	font (default "System")

		Set the font facename to be used in the Windows 3.0 version
		of UW/PC.  This can be up to 15 characters in length.

	fontsize (default 8)

		Set the size of the font to be used in the Windows 3.0 version.

	init (default "ATZ^M~~~AT S7=45 S0=0 V1 X1^M~")

		The modem initialisation string, delimited by double
		quote characters.  The strings are the same as for
		function keys, except that ALT sequences are ignored.
		The string cannot be longer than 100 characters in length.

	hangup (default "~~~+++~~~ATH0^M")

		The modem hangup string to use if after dropping the
		DTR signal, the carrier is still present.  The string
		cannot be longer than 100 characters in length.

	mouse (default on)

		If this configuration option is on then the mouse will
		be enabled for use by the internal routines.  In particular,
		cutting and pasting can be done using the mouse (as well
		as the keyboard).  This option has no effect if no mouse
		was found attached to the computer or it could not be
		initialised properly.  Only Microsoft-compatible mice are
		supported by UW/PC.  You may want to set this to "off" even
		if you have a mouse because the mouse processing can slow
		down UW/PC's screen updating considerably.

	parity (default none)

		The parity to use for transmission.  This can be one
		of none, even or odd.

	popup (default is off)

		This option specifies whether or not windows created by
		the remote host should automatically popup to be the top-most
		window when they are created, so that they can then be used
		straight away without you needing to determine their window
		numbers.  This option can be either on or off.

	port (default 1)

		The serial port to be used for communications.  This can
		be one of 1,2,3 or 4.

	sformat (default " ALT-Z for Help %v %e %v %p %v %u %v Windows: %a")

		Set the format of the status line when it is enabled by
		the "status" configuration option.  This string cannot
		be longer than 100 characters in length.  The string
		can contain "printf"-style commands to make various types
		of information appear in the line.  When the status line
		is displyed on the screen, it is truncated to the screen
		width.  The commands are summarised below:

			%% - The character "%" itself.
			%a - Expands to all currently active window numbers
			     separated by spaces.  This will always occupy
			     14 characters, padded with spaces.  The current
			     window is highlighted.
			%e - Terminal type of the current window, padded
			     to fill 5 characters with spaces.
			%h - Turn highlighting on (alternate attribute).
			%i - Turn highlighting off (normal attribute).
			%n - Expands to the highest numbered window in use
			     at present ('0' if in Protocol 0).
			%o - Expands to "Online " or "Offline" depending on
			     the current communications carrier status.
			%p - The current serial communications parameters.
			     e.g. "COM1 2400 N-8-1".
			%s - Current system time in 24-hour format (HH:MM).
			%t - Elapsed time since logon in hours and minutes,
			     or 5 spaces if no carrier is present.
			%u - In protocol 0, gives two spaces and in protocol
			     1, gives the string "UW".
			%v - Draw a vertical line in the status line.
			%w - Current window number ('0' if in protocol 0).
			%0-%9 - These are used internally by UW/PC for
			     showing block counts on file transfers, etc.
			     If you use them in your status line, they will
			     expand out to the string "0".

	sposn (default left)

		This option specifies where the status line specified by
		the "sformat" option is to appear on the bottom line of
		the screen.  This can be one of left, right, center, centre,
		leftsquash, rightsquash, centersquash or centresquash.  The
		values that specify squashing will make the line appear in
		the given position using up only as many character positions
		as necessary.  The rest of the line will be set to black
		and white.  This is useful for very small status lines -
		they can be squashed into a corner of the screen and
		effectively ignored.

	status (default on)

		Enable or disable the status line on the bottom of the
		screen.  This can be either on or off.

	stop (default 1)

		The number of stop bits (1 or 2) to use for transmission.

	strip (default off)

		Enable or disable the stripping of the most significant
		bit of received characters.  This can be either on or off.
		This is provided to strip unwanted parities on some systems.
		If seven bit transmission is in use, this option will be
		ignored and the most significant bit will always be stripped.

	swapbs (default off)

		Enable or disable the swapping of the backspace and delete
		keys.  Some people like to have this swap in place.  This
		can be either on or off.

	terminal (no default)

		This can appear up to five times in the configuration file
		and each occurrence will load a terminal description into
		memory.  It's string value specifies a filename for a
		compiled terminal description.  The full pathname should be
		supplied.  For example, the following line could be added to
		the configuration file to add a "VT102" terminal emulation:

			terminal="c:\uw\vt102.trm"

		The standard VT52, ADM31 and ANSI terminal types can be
		replaced with new terminal descriptions by loading new
		files that have the VT52, ADM31 or ANSI terminal type
		specified.

	uw (default "uw^M")

		This string is sent to the UNIX host in protocol 0 when
		the ALT-U key is pressed.  Its purpose is to send the
		name of the UW server program to the host to start the
		server, and thus is a shortcut to typing the name in by
		hand.  The characters "^" and "~" have the same meaning
		as for the modem control strings.  The string cannot be
		longer than 100 characters in length.

	xonxoff (default encoded)

		This configuration variable specifies whether or not
		the XON (CTRL-Q) and XOFF (CTRL-S) keys should be encoded
		for transmission to a UW session, or sent direct without
		any encoding.  This can be one of direct or encoded.  On
		some systems, the modem connection is routed through a
		"terminal server" which exists on the UNIX host's network.
		Some of these terminal servers provide independent XON/XOFF
		flow control, and process the XON and XOFF characters
		themselves.  When the XON and XOFF characters are encoded
		however, they are passed through to the actual UW session,
		but because of the high level of buffering within the UW
		server, they are practically useless to stop and start
		the display.  By setting this variable to "direct", the
		terminal server will receive the XON and XOFF characters,
		giving better control over scrolling displays.

	zmodem (default "DSZ")

		This configuration variable specifies the name of the
		program to run to perform ZModem file transfers.  Normally
		the full path is searched for "DSZ" but you can specify
		a more fuller path in this variable (e.g. "c:\bin\dsz")
		if you wish.  It is assumed that the program indicated
		by this variable has the same command-line syntax as the
		DSZ program from Omen Technology Inc.  Strange things
		may occur if the command-line syntax is not identical.
		This string may be up to 100 characters in length.

On startup, UW/PC makes a choice of screen colours based on the current
screen mode.  If the current mode is 0 (40x25 CGA mono), 2 (80x25 CGA mono)
or 7 (80x25 MDA mono), a monochrome scheme will be chosen.  Otherwise,
a colour scheme will be chosen.  These colours are overridden by the settings
of the "colXXXXX" configuration options in the configuration file.  The
utility program SETMODE.COM is provided to help out with setting screen
modes and the default colours.  It takes a one-character argument
corresponding to the mode to set.  e.g. "SETMODE 3" or "SETMODE 2".
There must only be ONE space between the command-name and the one-character
argument, since the command is very primitive, but effective.  An 80x25
screen mode will always be used regardless of the current screen size.

8. LIMITATIONS

UW/PC and the UW server have a number of limitations.  Primarily, if
a large amount of output is appearing in one window, the UW server will
be slow to process input and output in another.  This is a limitation
of the UW server, and not UW/PC.  The second limitation is unavoidable.
With all serial communciations over telephone and other serial links,
errors in transmission are likely to occur.  The UW protocols have no
provision for error-free transmission of information, and especially
the special UW commands that are sent back and forth between UW/PC and
the UW server are not sent using an error-free transmission.  If errors
occur in the transmission of these commands, strange things like output
appearing in the wrong windows may result.  Since the UW commands are
fairly rare (usually only when swapping windows for input or output), and
the chances of normal data being corrupted into legal UW commands are
very small, very few problems should result on reasonably clean modem
connections.  As a last resort, you can press ALT-E to return to protocol
0, and if the UW server hasn't exited (because the exit command was
corrupted), you can press (while in protocol 0, not protocol 1) "CTRL-A"
followed by the "Delete" key (or the backspace key if the "swapbs"
configuration option is set to "on"), which corresponds to the UW exit
command, which should abort the UW server.

9. FUTURE WORK

In future, UW/PC will be extended with the following capabilities: A
mini-FTP protocol, scroll-back buffers, Ymodem file transfers in any
window (and also protocol 0), XON/XOFF flow control and support for a
subset of the UW protocol 2 features which gives more control over
window management.  Comments and suggestions are very welcome.  A major
project that is underway is a port to Windows 3.0.
