			    UW/PC Version 2.02

			     Rhys Weatherley

			        March 1991

1. INTRODUCTION

This is version 2.02 of UW/PC, a multiple-window interface to UNIX for
IBM-PC's and compatible computers.  This program is based on a program
written for the Macintosh by John Bruner.  It provides up to seven
separate login sessions on the remote UNIX machine, and requires the
UW server to be running on the UNIX host.  Before UW/PC can be used in
a multiple session mode, the server must be compiled and installed on
the UNIX machine.

The source code for the server, together with the Macintosh program
binaries can be found on many ftp archive sites.  The standard server
distribution is available in the directory "info-mac/unix" on
"sumex-aim.standford.edu" [36.44.0.6].  The files are named 
"uw-42-part1.shar" ... "uw-42-part8.shar".  In Australia, the UW server
can be found in the directory "info-mac/unix" on "ditmela.mel.dit.csiro.au"
[128.250.90.81].  A copy of the server source code without the Macintosh
program binaries is included in this release.  For those of you who have
previously compiled the server, there has been no change at all to the
server code.

Version 2.02 of UW/PC is the same as the previous public release (2.01)
but with support for Windows 3.0 (finally!) and support for international
language translation tables.  Comments are invited to the author.  This
version implements the Unix Windows protocols 0 and 1.  Protocol 2 (with
more control over window management) is going to be supported in an upcoming
version, however some small parts of Protocol 2 are present in this version
which make Protocol 1 start faster.  Protocol 2 will not fully supported in
the DOS versions because of the complexity of the windowing code that is
necessary.

This version of UW/PC introduces support for FOSSIL drivers to improve
communications performance at high modem speeds.  See the "fossil" and
"ctsrts" options in the "CONFIGURING UW/PC" section below for more details.
The FOSSIL driver must be installed before running UW/PC.  FOSSIL drivers
are available from many FTP sites and BBSes.  If a FOSSIL driver is not used,
then it is possible that some characters may be lost at high modem speeds
using UW/PC's built-in communications driver which can't keep up or do
CTS/RTS handshaking.  As a general guide, UW/PC can happily handle up to
2400 baud without the need for a FOSSIL driver.  I use the BNU FOSSIL driver,
and haven't had any problems with it when used with UW/PC.

When running the DOS version of UW/PC under Windows 3.0 at high modem speeds,
it is sometimes better to run it full-screen rather than in a window.  This
is because the window updating done by Windows 3.0 can totally kill the
performance of UW/PC when receiving lots of characters at once.  Many code
optimisations have been done on UW/PC, but running it in a window still
remains a problem.

There are now many more configuration options, so even if you have used UW/PC
before, I suggest that you read the section "CONFIGURING UW/PC" later in this
documentation.  If you wish to use the new ANSI terminal emulation option,
then you should read the discussion on terminal types in the section "USING
UW/PC" below.  This version includes a terminal emulation compiler for
creating new terminal types using a small assembly-code like language.  It
is described in the file TERMCC.DOC, but will not be required for most users -
just those who want to write their own terminal types.

UW/PC is distributed under the terms of the GNU General Public License
(version 1), a copy of which is included.  Note however that the server
is NOT covered under this license and comes under the terms and conditions
contained within its documentation.  Also, please note that I am not
affiliated with the Free Software Foundation in any way, and that further
releases of this program may not have source code included or be distributed
under the GNU General Public License, but probably will.

Comments about UW/PC can be sent to the author (me) at the e-mail
address rhys.weatherley@gmail.com.

Russ Poffenberger wrote another Windows 3.0 version of UW, called UW/WIN.
Note that I do not have anything to do with UW/WIN, so all bug reports or
suggestions about it should be sent to Russ.

2. FILES

Unlike versions of UW/PC prior to version 2.02, this version comes in three (3)
separate ZIP files:

	UWPC202E.ZIP	The executable programs for UW/PC.
	UWPC202S.ZIP	The full source code for UW/PC.
	UWPCSERV.ZIP	Source code for the Unix server.

This split was done because the size of the single ZIP file was getting too
large, and some people already have the server, or aren't interested in the
source code.  If you don't wish to inspect the source, then you only require
the first and third ZIP files, and if you already have the server compiled,
then you only need the first ZIP file.

The following files should be present in the UW/PC distribution ZIP file
UWPC202E.ZIP:

	README		Instructions for installing UW/PC.
	COPYING		A copy of the GNU General Public License.
	UWINSTAL.EXE	An installation program for UW/PC to copy the
			files and executables into the right place.
	UW.EXE		The actual UW/PC program itself (for DOS).
	UW-W.EXE	The Windows version of UW/PC.
	UW.DOC		This documentation file.
	UWEG.CFG	An example configuration file - rename to
			UW.CFG to use this file.
	UW.LNG		Translation tables for international language
			support.  See INTERNATIONAL SUPPORT IN UW/PC
			below for more details.
	UWFONT.FON	A file of small fonts for the Windows version of
			UW/PC.  This should be installed with the Windows
			control panel.
	TERMCC.EXE	A compiler for creating new terminal types.
	TERMCC.DOC	Documentation for TERMCC.EXE.
	SETMODE.EXE	A useful screen mode setting utility.
	HISTORY		History of UW/PC versions.
	UW-TERMS.ZIP	Contains some external .TRM terminal types.  At
			present, VT102.TRM and AVATAR.TRM.  See the section
			on configuration below for information on how to
			use these terminal types.
	SCRIPTS.TAR	Contains a bunch of useful Unix shell scripts for
			use with the server and UW/PC.  See "UNIX WINDOWS
			UTILITIES" below for more information.

	UW-SRC.ZIP	The source code for UW/PC and TERMCC.
	UWSERVER.TAR	The source code for the UNIX server.

SETMODE was included to assist with configuration of the screen colours
(see "CONFIGURING UW/PC" later).  The Macintosh binaries have been stripped
from the server, and can be obtained from one of the FTP sites mentioned
above if desired.  The source code in UWSERVER.TAR should be compiled on
the UNIX host to allow the full multi-window potential of UW/PC to be used.

Contributions and suggestions of new terminal types for the UW-TERMS.ZIP
file are welcome.

3. READ THIS IF YOU ARE HAVING TROUBLE

If you are having trouble getting UW/PC to go, especially with the UW server
program, then exit UW/PC and start it again with the "-debug" option.
i.e. "uw -debug".  Then, every character that is sent from the remote machine
will be placed into the file "UWDEBUG.OUT" in the current directory.  Upload
this file to the UNIX machine in binary mode (in some way), uuencode it and
send it to me via e-mail.  This will help me to know EXACTLY what you are
doing, and so I may be able to find the bugs more easily.

On some systems, the server will abort when it is started with a message like
"no ttys".  If this happens, recompile the server after modifying the
Makefile to compile using BSD4.2 instead of BSD4.3 and play with the
compilation options.  This is discussed in the Makefile for the server.

4. USING UW/PC

When UW/PC starts, it initialises the screen and serial port, and then
enters "Protocol 0", which is equivalent to the dumb terminal emulations
available in conventional communications programs.  The default emulation
is ADM31, but VT52 and ANSI emulations are also available.  A number of
special keystrokes are defined in protocol 0:

	ALT-B - Send a line break over the serial link.  CTRL-BREAK and
		CTRL-END will also send a line break.
	ALT-C - Start a "cut" operation.  You can select a region in
		the current window to cut and place in the clipboard.
		Press RETURN at each corner and ESC to quit.  You can
		also use the mouse to select a region of the current
		window.  Press down and hold the left mouse button at
		one corner of the region and release it at the other
		corner.  This will only work if the mouse is enabled.
		See "CONFIGURING UW/PC" below.  CTRL-INSERT will also
		perform this operation, and under Windows 3.0 ALT-C
		does NOT (it is used for a pull-down menu).
	ALT-D - If no dialing directory entries have been defined, then
		the quick dialing string will be sent.  Otherwise the
		dialing directory will be displayed, and you may select
		a number to be dialed.  See "CONFIGURING UW/PC" below
		for more information.
	ALT-H - Hangup the modem, by first dropping the DTR signal,
		and then sending the hangup string if the carrier
		signal is still present.
	ALT-I - Send the modem initialisation string, even if a
		carrier signal is present.
	ALT-J - Jump to a DOS shell.  Type "EXIT" at the DOS prompt to
		return to UW/PC.
	ALT-L - Start and stop an ASCII capture.  You will be prompted
		for a file name to store all data coming from the remote
		host in until you press ALT-L again.  If you have the
		status line set to display the terminal type then it
		will change to "CAP" while the capture is in effect.
	ALT-P - Paste the contents of the clipboard into the current
		window.  If a paste is currently active in another
		window then the paste will be ignored.  After every line
		is sent to the remote host a 10ms pause will be made
		to allow the remote host to catch up.  You can also press
		the right mouse button to start a paste if the mouse
		is enabled.  Under Windows 3.0, SHIFT-INSERT will also
		perform this operation.
	ALT-R - Receive a file from the remote host.  See UPLOADS AND
		DOWNLOADS below.
	ALT-S - Send the contents of a file to the remote host.  See
		UPLOADS AND DOWNLOADS below.
	ALT-T - Send a string of the form "stty rows N columns M" to the
		remote host.  This is useful for resetting the remote
		host's idea of what the current window size is.  Sometimes
		Unix systems get confused as to the size of a terminal
		type (usually 80x24 in UW/PC), and so this command will
		send an "stty" command-line to correct it.
	ALT-U - Send the string defined by the "uw" configuration
		variable.  This is useful once connected to start the
		UW server on the UNIX host.  See "CONFIGURING UW/PC"
		below.
	ALT-X - Exit the program.  If any windows are present, they
		will be destroyed.  This function does NOT hangup
		the modem before exiting, so UW/PC can be restarted
		in protocol 0 and connected to the remote host if required.
	ALT-Q - Quit the program: same as ALT-X.
	ALT-Z - Popup a small box containing descriptions of the
		special keystrokes.  Press any key to resume.

Protocol 0 exists to allow you to connect to the UNIX host in whatever
way the host requires.  When you are ready to use the multi-window mode
of UW/PC, execute the UW server on the remote host by typing its command
name, or by pressing ALT-U if the "uw" configuration variable has been
set correctly (see below).  Note that the server must be compiled and
accessible for you to do this.

The UW server sends a special control sequence which UW/PC interprets
and then automatically starts the multi-window session.  By default the
server will also create a terminal window.  See the documentation that
accompanies the server for information on modifying its startup behaviour.
Once UW/PC has entered the multi-window session (protocol 1), up to 7
windows can be created, ALT-B, ALT-H and ALT-U no longer have any effect,
and the following additional special keystrokes are defined:

	ALT-E - Exit the UW session and return to protocol 0.
		A "kill window" request will be sent for all currently
		active windows.
	ALT-K - Kill the current window.
	ALT-N - Create a new window if possible.  Up to 7 windows
		may be created and used.  The status line will indicate
		which windows are currently active if you have set it
		correctly.  (See "CONFIGURING UW/PC" below).
	ALT-W - Cycle to the next window.  e.g. if you are in window 3,
		then you will cycle to the next highest numbered window,
		cycling back to 1 if necessary.  This is useful to quickly
		switch between windows.  ALT-0 may also be used for this.
	ALT-n - "n" is a digit between 1 and 7.  These keystrokes
		direct UW/PC to "jump" to the nominated window.

Usually, if you exit a UNIX shell in a window, that window will be killed
automatically, and when all windows have been killed, the UW session will
terminate, returning you to protocol 0.  If protocol 1 does not exit, then
you can try some of the procedures given in the "LIMITATIONS" section
later in this document.

The UW server usually defaults to using ADM31 emulation whenever it creates
a new window.  You may need to manually modify the UNIX terminal type in the
windows to get the correct screen behaviour if you have set your default
emulation type to something other than ADM31 in the configuration file.
If you are using the Korn shell "ksh", you can add the following lines to
your ".kshrc" file to automatically change the terminal type to XXX, where
XXX is your preferred terminal type.

		case $TERM in
		  adm31) TERM=XXX export TERM ;;
		  *) ;;
		esac

Some UNIX termcap entries do not have the entry for the ADM31 terminal type,
and so some UNIX programs may not have the correct screen behaviour.  The
UW server will set the TERMCAP environment variable within a UW session
window, but in protocol 0 this environment variable is not set automatically.
To use ADM31 emulation in protocol 0 on machines without the correct termcap
entry, set the TERMCAP environment variable to the following string (newlines
are for layout only, and shouldn't appear in the actual value):

	adm31:cr=^M:do=^J:nl=^J:al=\EE:am:le=^H:bs:ce=\ET:
	cm=\E=%+ %+ :cl=^Z:cd=\EY:co#80:dc=\EW:dl=\ER:
	ei=\Er:ho=^^:im=\Eq:li#24:mi:nd=^L:up=^K:MT:km:so=\EG1:se=\EG0:

Alternatively, setting the "emul0" configuration variable to "vt52" or "ansi"
will allow you to use VT52 or ANSI emulation in protocol 0, which are usually
defined in all termcap and terminfo entries.  ADM31 emulation will still be
used for UW session windows if the "emul" variable is set to "adm31".  ADM31
emulation is much "smarter" than VT52, so you will probably want to use
it wherever possible.  ANSI emulation is also available and this is much
smarter than ADM31, but because the UW server defaults to ADM31, you
may still want to use it instead of ANSI.

If you do want to use the ANSI emulation mode and the "ansi" termcap on your
Unix host is "brain-dead" (i.e. it doesn't support very much), then you
can set the TERMCAP variable to the following value to get a smarter ANSI
emulation:

	ansi:am:bs:pt:co#80:li#24:kn#3:
        	:AL=\E[%dL:DL=\E[%dM:DO=\E[%dB:IC=\E[%d@:LE=\E[%dD:
        	:RI=\E[%dC:UP=\E[%dA:al=\E[L:bt=\E[Z:cd=\E[J:ce=\E[K:
        	:cl=\E[H\E[J:cm=\E[%i%d;%dH:ct=\E[2g:
        	:dc=\E[P:dl=\E[M:ho=\E[H:ic=\E[@:kb=\b:kd=\E[B:
        	:kh=\E[H:kl=\E[D:kr=\E[C:ku=\E[A:nd=\E[C:
        	:se=\E[m:so=\E[7m:st=\EH:ue=\E[m:up=\E[A:us=\E[4m:
        	:k1=\EOP:k2=\EOQ:k3=\EOR:k4=\EOS:

To find out if the "ansi" termcap on your computer is "brain-dead", search
the file "/etc/termcap" on the Unix host for the string "|ansi|" and if it
only has a couple of lines listed before the next entry, then it is
"brain-dead".  If there are 5 or more lines, then most likely your "ansi"
termcap is OK.  Ask a local guru if you are unsure.  TERMCAP and TERMINFO
gurus may want to play around with the various ANSI, VT100 and VT102
compatible terminal types, etc to try and find something that has lots of
features for working with editors such as emacs, etc.  See the ANSI.CAP file
in the source archive and the documentation for TERMCC for more information
on the capabilities of UW/PC's ANSI emulation.  Any suggestions (no matter
how nasty :-) on the ANSI emulation are welcome.

Adding the following lines to your ".kshrc" file is the best way to make sure
that ANSI emulation is always correctly used in Protocol 1.  You can also use
ANSI emulation in Protocol 0 if you desire.

  case $TERM in
    adm31) TERM=ansi export TERM ;;
    *) ;;
  esac
  TERMCAP='ansi:  *** the ANSI string given above ***  ' export TERMCAP

All of the special protocol 0 keystrokes except ALT-U also work in protocol
1, but it is inadvisable to use ALT-I during a UW session.  ALT-H will still
hangup the modem, after exiting the UW session.  ALT-B will first exit
any active UW session before sending the BREAK pulse.  This avoids some
strange things that may occur with network terminal servers and the like.
ALT-X will also terminate a UW session before exiting UW/PC.

5. UPLOADS AND DOWNLOADS

UW/PC has ASCII and XMODEM file transfers built-in and it can also use the
program DSZ (which you need to obtain separately) to perform ZMODEM transfers.
ZMODEM file transfers are disabled in protocol 1 (the multi-window mode)
because DSZ is incompatible with the UW protocol.  It should be noted however,
that because of deficencies in the UW server, you probably won't be able to
run more than one XMODEM transfer at the same time.  This stems from the
fact that if a lot of input or output is appearing in one window then all
other windows will grind to a halt.  Except in the case of a ZMODEM receive,
you will be prompted for the filename of the file to be transfered.  To use
DSZ for ZMODEM transfers, you will need to have DSZ.COM somewhere in your
PATH for it to be accessible.  Note that the DSZ command "ALT-N" will allow
you to "nuke" a transfer and return to UW/PC if something goes wrong.

ASCII uploads will the send the contents of the text file to the remote
machine, pausing 10 milliseconds between lines to allow the remote machine
to catch up.  You need to make provisions for capturing the data at the
other end.  Usually you can do this by executing the UNIX command
"cat >filename" before you start the transfer, where "filename" is the
file you want the data to end up in.  Once the transfer is complete, you
can press CTRL-D to end the "cat" command's processing.  Pressing ESC will
abort the transfer - all other keys will be processed as normal.

ASCII downloads consist of placing all incoming data from the remote host
into the nominated file.  Pressing ESC will abort the transfer, and all
other keys are processed as normal.  Usually you type in "cat filename" at
the UNIX command line (but don't press RETURN yet), start the ASCII download,
and then press RETURN to start it going.  Once it has finished you press
ESC to abort the reception of characters.  ASCII capture (ALT-L) is similar
to ASCII download, except ALT-L is used to abort the transfer.

For XMODEM and ZMODEM transfers, you will need the "sx", "rx", "sz" and "rz"
programs for UNIX compiled and available.  Read the manuals for these programs
to get more information on their options.  For downloads, start the "sx" or
"sz" programs on the remote machine and then press "ALT-R" to start the
reception of the files.  Note that unlike some other communications programs,
the ZMODEM "auto-download-start" command sequence is not recognised, and
so you need to manually start the download.  For uploads, start the "rx" or
"rz" programs on the remote machine and then press "ALT-S" to the start
sending the nominated files.

In the near future, UW/PC will be upgraded with a mini-FTP protocol that will
allow you to transfer files between the remote machine and your PC using
FTP-like commands.  This protocol will be more "aware" of the problems of
performing multiple transfers when more than one window is active and will
get around some other problems with transmission mediums that do not accept
some characters.

6. USING UW/PC WITH OTHER PROGRAMS

UW/PC can be used as a stand-alone communciations program, or in
conjunction with some other communciations program.  If you have a
faviourite communications program (e.g. Telix, Procomm, MS-Kermit, etc),
and have extensive "scripts", etc to connect you to a UNIX host, and
still want to use these functions, you can still do so.  Once connected
to the UNIX host (or whenever you are ready), you can shell out to a DOS
shell (a function available in most programs), and execute UW/PC to
handle the UW sessions.  Note that you must execute the UW server from
within the control of UW/PC otherwise the startup control sequence that
the server sends to UW/PC may be missed.  You can exit UW/PC at any time to
return to the other program.  It may also be possible for your program's
scripting language to automatically execute the UW/PC program once a
UNIX host connection has been made.

7. CONFIGURING UW/PC

When UW/PC starts up, it first inspects the file "UW.CFG" in the current
directory, and if that doesn't exist, the file "UW.CFG" in the directory
the program was loaded from.  This plain ASCII text file is expected to
contain configuration parameters for UW/PC.  If it is not found, defaults
will be chosen for all parameters.  An example configuration file is
distributed with UW/PC.  Each line of the file is of the form "name=arg"
where "name" is the name of the configurable parameter, and "arg" is its
argument.  Comments may be introduced starting with "#", but may not
appear within commands.  The configurable parameters, which are all
optional, and their defaults follow:

	address (defaults are the normal COM port addresses)

		This option allows you to change the hardware port address
		to use for communication on the port specified by the "port"
		configuration option.  This option's value can be specified
		in decimal, octal (prefixed with '0') or hexadecimal (prefixed
		with '0x') and should appear after the "port" option if that
		is supplied.  The defaults for each of the four COM ports
		are 0x3F8, 0x2F8, 0x3E8 and 0x2E8 respectively.

	ansibright (default no)

		If this option is set to yes then the ANSI colours in the ANSI,
		VT100 and VT102 emulations will be brighter than the default.
		The brighter colours can stand out better on some monitors.

	baud (default 2400)

		The baud rate to use for transmission.  This can be
		one of 110, 150, 300, 600, 1200, 2400, 4800, 9600,
		19200, 38400, 57600 or 115200.

	baudest (default is whatever "baud" is set to)

		The baud rate to pass to DSZ to estimate the transfer time.
		For some high-speed modems, you lock "baud" to a higher value
		than the actual connect speed.  However, DSZ gets confused
		and prints the wrong estimated transfer time.  This option
		can be used to adjust the baud rate DSZ uses for estimations.
		e.g. if "baud" is set to 19200 for a V.32 modem, you may
		wish to set "baudest" to 9600.

	bigvideo (default off)

		If this option is set to "on", then a 43/50 line video
		mode will be selected.

	beep (default on)

		Enable or disable the terminal beep.  This can be either
		on or off.

	bellfreq (default 1200)

		Frequency of the terminal bell, in Hz.

	belldur (default 200)

		Duration of the terminal bell, in milliseconds.

	bits (default 8)

		The number of data bits (7 or 8) to use for transmission.

	cinit (default yes)

		Indicates whether or not the initialisation string should
		be sent if the carrier already exists.  This can be either
		yes or no.  When using UW/PC with other programs (see
		above), it is useful to set this to "no" to prevent the
		initialisation string being sent to the UNIX host once
		connected.

	colhighlight (default is screen mode dependent)

		This numeric option specifies the screen attribute to
		use for the highlighted printing characters (e.g. bold).
		Setting this to 0 will make UW/PC use the default attribute
		which depends on the screen mode in use.

	colhighstatus (default is screen mode dependent)

		This numeric option specifies the screen attribute to
		use for the highlighted printing characters on the status line.
		Setting this to 0 will make UW/PC use the default attribute
		which depends on the screen mode in use.

	colinverse (default is screen mode dependent)

		This numeric option specifies the screen attribute to
		use for the inverse printing characters.  Setting this to
		0 will make UW/PC use the default attribute which depends
		on the screen mode in use.

	colnormal (default is screen mode dependent)

		This numeric option specifies the screen attribute to
		use for the normal printing characters.  Setting this to
		0 will make UW/PC use the default attribute which depends
		on the screen mode in use.

	colstatus (default is screen mode dependent)

		This numeric option specifies the screen attribute to
		use for the normal printing characters on the status line.
		Setting this to 0 will make UW/PC use the default attribute
		which depends on the screen mode in use.

	ctsrts (default is on)

		If a FOSSIL driver is enabled (see the "fossil" option below),
		and this option is set to "on", then CTS/RTS handshaking will
		be used.  This option has no effect if a FOSSIL driver is
		not being used.

	cursor (default is underline)

		This option specifies the shape of the cursor to be used on
		the screen.  It can be underline, halfheight or fullheight.
		This is very useful if you run UW/PC in a DOS window in
		Windows 3.0 386 enhanced mode because the underline cursor
		is very hard to see.

	dial (default "ATDT")

		This is the "quick dial" string.  If there are no dialing
		directory entries, or 'Q' is pressed while the dialing
		directory is popped up, then this string is send to the modem.
		You can modify this string to contain a phone number if you
		wish.  e.g. "ATDP1234567^M" will dial the number 1234567
		using pulse dialing on a Hayes compatible modem when ALT-D
		is pressed.  The string cannot be longer than 50 characters
		in length.  If the string contains '|', then any characters
		that follow are ignored during dialing.  They will be
		displayed in the dialing directory as a comment.

	dialnum1 (default none) ... dialnum20 (default none)

		These 20 strings specify numbers in the dialing directory.
		Each string cannot be longer than 50 characters in length.
		When a number is dialed, the string specified by the
		option "dialprefix" is sent, followed by the number, and
		then followed by the string specified by the option
		"dialsuffix".  Special modem dialing characters like ','
		may be used in the string.  If the string contains '|',
		then any characters that follow are intended to be a
		comment to be displayed in the dialing directory.

	dialpar1 (default none) ... dialpar20 (default none)

		These 20 strings specify communications parameters for the
		corresponding 20 numbers given by "dialnum1",...,"dialnum20",
		that override the default parameters set by "baud", "parity",
		"bits" and "stop" when the entry is dialed.  The strings have
		the form "baud pbs" where "baud" is the baud rate, "p"
		is the parity ('N', 'E', or 'O'), "b" is the number of data
		bits (7 or 8) and "s" is the number of stop bits (1 or 2).
		e.g. "2400 E71".  Thus, if "dialpar1" is set to "2400 E71"
		and the number "dialnum1" is to be dialed, then the comms
		port will be first set to 2400 baud, even parity, 7 data bits
		and 1 stop bit before the dial.  If a string has not been
		specified for a dialing directory entry, then no change
		is made.

	dialprefix (default "AT^M~ATDT")

		This string is sent to the modem before a number when ALT-D
		is pressed and a number is selected.  This string cannot be
		longer than 50 characters in length.  The leading "AT^M~"
		is for allowing the modem to get into sync with a new baud
		rate.  Otherwise, if the baud rate is changed (by "dialparn"),
		then the modem and computer are using different baud rates,
		and errors in transmission of the dialing string may occur.
		Inserting the extra "AT" brings the modem back into sync with
		the computer's new baud rate.

	dialsuffix (default "^M")

		This string is sent to the modem after a number when ALT-D
		is pressed and a number is selected.  The string cannot be
		longer than 50 characters in length.

	direct (default no)

		If this option is set to "yes", then the COM port is assumed
		to be connected to a direct serial line that doesn't have
		modem handshaking signals.  This may be necessary for RS-232
		cables that only have 3 lines connected.

	disable (default no)

		This option allows you to completely turn off the handling
		of the special UW server codes that UW/PC processes.  This
		allows you to use UW/PC as a completely stand-alone comms
		program with no interference from the UW protocol.  This
		option can be either yes or no.  Note that you cannot use
		the multi-window mode of UW/PC if this is set to 'yes'.

	emul (default adm31)

		The default terminal emulation type to use for windows.
		When a new window is created, it will use this emulation
		type.  This can be one of adm31, vt52, ansi or vt100 or a
		string (e.g. "vt102"), signifying a currently loaded terminal
		description that will be searched for to become the
		default emulation.  The double quotes are optional.
		When the terminal description is searched for, case is
		ignored during compares.

	emul0 (defaults to whatever emul is set to)

		Set the terminal emulation type for protocol 0.  This is
		to rectify some problems with UNIX termcap entries that
		are missing the entry for ADM31 terminals, as discussed 
		above under "USING UW/PC".  It can be one of adm31, vt52,
		ansi or vt100 or a string specifying a terminal type loaded
		with the "terminal" configuration option.

	F1 - F10 (default undefined)

		These ten configuration variables allow you to define
		the function keys to any strings you desire.  If you do
		not define a function key, it will have its default setting
		as defined by the terminal emulation in use.  The character
		"^" is a control code prefix.  e.g. "^M" corresponds to
		the CTRL-M character.  "~" indicates a 1/2 second pause and
		"#" outputs the next character directly, so that "#^" is
		the character "^" ("#~" and "##" are similar), EXCEPT when
		the next character is alphabetic.  In that case, if the
		character is "x", then ALT-x is taken as the next character.
		In this way, you could define F10 to "#Xy" to always exit
		UW/PC without needing to answer the Yes/No question.  Defining
		a function key to an empty string will also cause the
		default behaviour to be taken.  The strings cannot be
		longer than 100 characters in length.

	fixterm (default none)

		This option indicates a string to be sent to the remote host
		when a window is created with ALT-N.  It can be a literal
		string, or one of the values none, sh or csh (without quotes).
		If this option is sh, then each window created will have the
		string "TERM=xxx export TERM^M" sent to it, where "xxx" is
		name of the current terminal type.  If this option is csh, then
		the string sent has the form "setenv TERM xxx^M" instead.  If
		this option is defined to a literal string, then the special
		sequence "#?" can be used to indicate the name of the terminal
		type.  The purpose of these strings is to set the terminal
		type on the remote Unix host to the type in use by the UW/PC
		window.  A useful setting is "TERM=#? export TERM^Mclear^M"
		which will set the type and then clear the window, removing
		the mess of the type setting commands.  For C-Shell compatible
		shells, the string would be "setenv TERM #?^Mclear^M".  As
		noted above, only windows created with ALT-N are affected in
		this way.  The scripts described in the section "UNIX WINDOWS
		UTILITIES" below provide enough support to set the correct
		terminal type for windows created by the Unix host.

	font (default "Terminal")

		Set the font facename to be used in the Windows 3.0 version
		of UW/PC.  This can be up to 15 characters in length.

	fontset (default is oem)

		Set the character set to be used in the Windows 3.0 version
		of UW/PC.  It can be one of ansi, oem, or symbol.

	fontsize (default 12)

		Set the size of the font to be used in the Windows 3.0 version.
		For a good small font for UW/PC, set "font" to "Terminal",
		"fontset" to oem, and "fontsize" to 8.  This will allow you
		to have more windows open on the screen at once.

	fossil (default is no)

		If this option is set to "yes", and there is a FOSSIL driver
		installed, then it will be used for communications in
		preference to direct communications I/O.  If a FOSSIL driver
		is not installed, then direct communications I/O will be
		used regardless of this option's setting.  On high speed
		modems, FOSSIL drivers can give much better performance.  The
		"ctsrts" option only applies if a FOSSIL driver is being used.
		Note that when a FOSSIL driver is in use, only baud rates
		between 300 and 38400 inclusive may be used.  Baud rates
		outside this range are either increased to 300 baud, or
		decreased to 38400 baud.

	init (default "AT^M~ATZ^M~~~AT S7=45 S0=0 V1 X1^M~")

		The modem initialisation string, delimited by double
		quote characters.  The strings are the same as for
		function keys, except that ALT sequences are ignored.
		The string cannot be longer than 100 characters in length.
		The leading "AT" is primarily to get the modem into sync
		with the selected baud rate before sending the rest of
		the string.  If this isn't present, then the modem sometimes
		corrupts the initialisation string on the first startup
		because it is using a different baud rate.

	hangup (default "~~~+++~~~ATH0^M")

		The modem hangup string to use if after dropping the
		DTR signal, the carrier is still present.  The string
		cannot be longer than 100 characters in length.

	langfile (default is "UW.LNG" in the same directory as "UW.EXE")

		Specifies the name of the file to be searched to find
		language character translation tables.  The full pathname
		should be specified.  See INTERNATIONAL SUPPORT IN UW/PC.

	language (default is none)

		Set the language to be used for translation tables.  The
		filename given by the "langfile" configuration option is
		searched to find the given language and the internal tranlation
		tables are loaded.  If the specified table could not be found
		or this option is set to an empty string, then no character
		translation is performed.  When using a non-English language,
		it may sometimes be necessary to set the configuration
		option "strip" to "off".

	mouse (default on)

		If this configuration option is on then the mouse will
		be enabled for use by the internal routines.  In particular,
		cutting and pasting can be done using the mouse (as well
		as the keyboard).  This option has no effect if no mouse
		was found attached to the computer or it could not be
		initialised properly.  Only Microsoft-compatible mice are
		supported by UW/PC.  You may want to set this to "off" even
		if you have a mouse because the mouse processing can slow
		down UW/PC's screen updating considerably.

	obeyterm (default ignore)

		This option declares what should be done with the terminal
		type of a window created by the remote host in protocol 2.
		If it is "ignore", then windows created by the remote Unix
		host will have their terminal types overridden by the type
		specified by the "emul" option.  If it is "always", then
		the terminal type specified by the remote will always be used
		and no override will occur.  If it is "notfirst", then the
		remote terminal type will be obeyed, except for the first
		window created remotely which will have its type overridden.
		This option has no effect in protocol 1 or on windows created
		by pressing ALT-N.

	parity (default none)

		The parity to use for transmission.  This can be one
		of none, even or odd.

	popup (default is off)

		This option specifies whether or not windows created by
		the remote host should automatically popup to be the top-most
		window when they are created, so that they can then be used
		straight away without you needing to determine their window
		numbers.  This option can be either on or off.

	port (default 1)

		The serial port to be used for communications.  This can
		be one of 1,2,3 or 4.

	protocol (default 2)

		The maximum multi-window protocol that can be used by UW/PC.
		This option can be either 1 or 2.  If this option is 1, then
		the enhanced facilities of protocol 2 will be disabled and the
		server will be forced into using protocol 1.  If this option
		is 2, then UW/PC will request the server to use protocol 2,
		and if that is not possible, then UW/PC will default to
		protocol 1.  If the "disable" option is set to "yes", then
		this option has no effect.

	sformat (default " ALT-Z for Help %v %e %v %p %v %u %v Windows: %a")

		Set the format of the status line when it is enabled by
		the "status" configuration option.  This string cannot
		be longer than 100 characters in length.  The string
		can contain "printf"-style commands to make various types
		of information appear in the line.  When the status line
		is displyed on the screen, it is truncated to the screen
		width.  A good status line to use for protocol 2 is
		" %e %v Windows: %a %v %c" which displays the terminal
		emulation, the active windows, and the title of the current
		window.  The commands are summarised below:

			%% - The character "%" itself.
			%a - Expands to all currently active window numbers
			     separated by spaces.  This will always occupy
			     14 characters, padded with spaces.  The current
			     window is highlighted.  Any window that has had
			     output arrive in it recently and isn't the
			     current window will have a '*' following its
			     window number.
			%c - Title (caption) of the current window, space
			     filled and truncated to the number of characters
			     given by the "stlen" option.  By default, the
			     title of the protocol 0 window is "Unix Windows"
			     and the title of a protocol 1 (or 2) window is
			     "N - UW/PC" where "N" is the window number.  The
			     title may be changed by the remote host using the
			     "uwtitle" command or a terminal escape sequence.
			%e - Terminal type of the current window, padded
			     to fill 5 characters with spaces.
			%h - Turn highlighting on (alternate attribute).
			%i - Turn highlighting off (normal attribute).
			%n - Expands to the highest numbered window in use
			     at present ('0' if in Protocol 0).
			%o - Expands to "Online " or "Offline" depending on
			     the current communications carrier status.
			%p - The current serial communications parameters.
			     e.g. "COM1 2400 N-8-1".
			%r - The number of the current protocol: "0", "1",
			     or "2".
			%s - Current system time in 24-hour format (HH:MM).
			%t - Elapsed time since logon in hours and minutes,
			     or 5 spaces if no carrier is present.
			%u - In protocol 0, gives two spaces and in protocol
			     1, gives the string "UW".
			%v - Draw a vertical line in the status line.
			%w - Current window number ('0' if in protocol 0).
			%0-%9 - These are used internally by UW/PC for
			     showing block counts on file transfers, etc.
			     If you use them in your status line, they will
			     expand out to the string "0".

	sposn (default left)

		This option specifies where the status line specified by
		the "sformat" option is to appear on the bottom line of
		the screen.  This can be one of left, right, center, centre,
		leftsquash, rightsquash, centersquash or centresquash.  The
		values that specify squashing will make the line appear in
		the given position using up only as many character positions
		as necessary.  The rest of the line will be set to black
		and white.  This is useful for very small status lines -
		they can be squashed into a corner of the screen and
		effectively ignored.

	status (default on)

		Enable or disable the status line on the bottom of the
		screen.  This can be either on or off.

	stlen (default 30)

		The maximum length of the window title displayed in the
		status line.  This must be a number between 0 and 63 inclusive.

	stop (default 1)

		The number of stop bits (1 or 2) to use for transmission.

	strip (default off)

		Enable or disable the stripping of the most significant
		bit of received characters.  This can be either on or off.
		This is provided to strip unwanted parities on some systems.
		If seven bit transmission is in use, this option will be
		ignored and the most significant bit will always be stripped.

	swapbs (default off)

		Enable or disable the swapping of the backspace and delete
		keys.  Some people like to have this swap in place.  This
		can be either on or off.

	terminal (no default)

		This can appear up to five times in the configuration file
		and each occurrence will load a terminal description into
		memory.  It's string value specifies a filename for a
		compiled terminal description.  The full pathname should be
		supplied.  For example, the following line could be added to
		the configuration file to add a "VT102" terminal emulation:

			terminal="c:\uw\vt102.trm"

		The standard VT52, ADM31 and ANSI terminal types can be
		replaced with new terminal descriptions by loading new
		files that have the VT52, ADM31 or ANSI terminal type
		specified.

	uw (default "uw^M")

		This string is sent to the UNIX host in protocol 0 when
		the ALT-U key is pressed.  Its purpose is to send the
		name of the UW server program to the host to start the
		server, and thus is a shortcut to typing the name in by
		hand.  The characters "^" and "~" have the same meaning
		as for the modem control strings.  The string cannot be
		longer than 100 characters in length.

	xonxoff (default encoded)

		This configuration variable specifies whether or not
		the XON (CTRL-Q) and XOFF (CTRL-S) keys should be encoded
		for transmission to a UW session, or sent direct without
		any encoding.  This can be one of direct or encoded.  On
		some systems, the modem connection is routed through a
		"terminal server" which exists on the UNIX host's network.
		Some of these terminal servers provide independent XON/XOFF
		flow control, and process the XON and XOFF characters
		themselves.  When the XON and XOFF characters are encoded
		however, they are passed through to the actual UW session,
		but because of the high level of buffering within the UW
		server, they are practically useless to stop and start
		the display.  By setting this variable to "direct", the
		terminal server will receive the XON and XOFF characters,
		giving better control over scrolling displays.

	zmodem (default "DSZ")

		This configuration variable specifies the name of the
		program to run to perform ZModem file transfers.  Normally
		the full path is searched for "DSZ" but you can specify
		a more fuller path in this variable (e.g. "c:\bin\dsz")
		if you wish.  It is assumed that the program indicated
		by this variable has the same command-line syntax as the
		DSZ program from Omen Technology Inc.  Strange things
		may occur if the command-line syntax is not identical.
		This string may be up to 100 characters in length.

On startup, UW/PC makes a choice of screen colours based on the current
screen mode.  If the current mode is 0 (40x25 CGA mono), 2 (80x25 CGA mono)
or 7 (80x25 MDA mono), a monochrome scheme will be chosen.  Otherwise,
a colour scheme will be chosen.  These colours are overridden by the settings
of the "colXXXXX" configuration options in the configuration file.  The
utility program SETMODE.EXE is provided to help out with setting screen
modes and the default colours.  It takes a one-character argument
corresponding to the mode to set.  e.g. "SETMODE 3" or "SETMODE 2".  If
the argument to SETMODE.EXE is 64, then a 43 or 50 line mode will be chosen.

8. INTERNATIONAL SUPPORT IN UW/PC.

UW/PC has support for international languages through its translation table
mechanism.  If your language has a standard method to translate special
non-English characters to 7-bit ASCII and back again, then you should consider
setting up a translation table for it, and installing it with the "langfile"
and "language" configuration options discussed above.  Currently UW/PC has
support for Scandinavian languages via the standard language file "UW.LNG",
as well as a "ukascii" translation table that will translate the hash symbol
into the IBM-PC character set pound symbol when the hash is received (could
any UK-ASCII users out there confirm that this is right?).

If you develop a translation table for another language (or fix one of my
own), then please send it to me via e-mail so I can include it in future
releases of UW/PC.

The language file consists of zero or more translation tables.  Blank lines
and lines that start with '#' are treated as comments.  Each translation table
in the language file starts with a comma-separated list of language names
that may be used to reference the table.  This first line must not begin with
white space to distinguish it from the lines in the rest of the table.

All other lines in a translation table must start with at least one white
space character (a space or a TAB) and be followed by a string of the form
"value1 c value2" where "value1" is the original character code to be
translated from, "value2" is the character code to translate to, and "c"
is one of "=", ">" or "<".  White space may optionally surround "c".  If
"c" is ">" then when the character "value1" is typed on the keyboard, it is
translated into the character "value2".  If "c" is "<" then when the character
"value2" is received from the remote host, then the character "value1" is
printed on the screen.  If "c" is "=" then the translation is bidirectional.
"value1" and "value2" can be decimal values or single characters enclosed
in matching single or double quotes.  For example:

		thargoidian,tharg
			148 = '|'
			132 > '{'
			153 < '\'

This table will translate character 148 to '|' when transmitting to the
remote host, translate '|' to 148 when received from the remote host, translate
132 to '{' on transmission and translate '\' to 153 on reception.  The table
will be used when the "language" configuration option is set to "thargoidian".
If there is more than one table in the file with the same language name then
the resulting translation tables that are generated are the merging of all
translation tables for the given language.

Many thanks to Riku Mattila (sir@otitsun.oulu.fi) for explaining translation
tables to me, and for prototyping Scandinavian support in a previous version
of UW/PC.

9. UNIX WINDOWS UTILITIES

This section gives a quick overview of the Unix Windows utilities.  Both those
that are distributed with the server and those in the SCRIPTS.TAR archive.
This section also describes how to set up a ".uwrc" file to automatically
create the windows you want when the server starts up.  The standard UW
utilities follow.  More detailed descriptions may be found in the manual
pages distributed with the server.

	uwtool	This command creates a new window and runs a command within
		it.  The terminal type can be overridden with the "-w" option
		and the window's title can be set with the "-t" option.  More
		information is available in the manual page for uwtool.  If
		a command is not supplied on the command-line, then a shell
		is created in the window.  Once the window has been created,
		uwtool terminates.

	uwterm	This is similar to uwtool, except that it starts a shell in
		the newly created window.  The shell is run with a leading
		'-', so any .profile or .login files will be run by the shell.
		Use "uwtool $SHELL" or "uwtool sh -c $SHELL" to start a window
		that doesn't run .profile or .login.  "sh -c" may be necessary
		with the Korn shell (ksh) to stop it printing its copyright
		message.  Unlike uwtool, uwterm does not terminate until the
		shell exits, so you should use '&' when running it from .uwrc.

	uwtitle	This command changes the title of the current window to the
		string on its command-line.  A window's title may also be
		specified using the "-t" option of uwtool and uwterm.  This
		can be useful in shell prompts to change the title on the
		window to the current directory whenever a "cd" is done.

	uwplot	This creates a window and copies its standard input to it.
		It is intended for use with the standard Unix plot package,
		which is not yet supported by UW/PC, but will be once the
		graphical extensions have been implemented.

The following shell scripts are distributed with UW/PC in the file SCRIPTS.TAR.
They are only guaranteed to work with UW/PC since they use some facilities and
escape sequences that are unique to UW/PC.  In particular, without some
modification, they will not work with Russ Poffenberger's UW/WIN program.  If
these scripts are run in protocol 0 (i.e. the server is not active), then
they will still work, although windows will not be created.

	uwsize	A script to request that UW/PC should send the current size
		of the window as an "stty rows n columns m" command.  Thus,
		typing "uwsize" at the shell prompt will reset the size that
		Unix thinks the window is to what UW/PC thinks it is.

		Usage: uwsize

	uwtype	A script to request that UW/PC should send back the current
		terminal type as a "TERM=xxx export TERM" or "setenv TERM xxx"
		command to the shell.  Thus, typing "uwtype" at the shell
		prompt will reset the terminal type that Unix thinks the window
		has to what UW/PC thinks it has.  The first form will be sent
		back unless the SHELL environment variable indicates either
		csh or tcsh is being used.

		Usage: uwtype

	uwscroll A script to change the size of the scroll-back buffer for
		the current window.  If the number of lines is 0, then the
		scroll-back buffer is disabled, and if no argument is given,
		then the default number of lines is restored.

		Usage: uwscroll [lines]

	uwrun	A script to run a command after adjusting the TERM and TERMCAP
		entries to something better.  Using this command together with
		uwtool, you can avoid some of the problems with having to set
		the TERMCAP variable as described above.  The "-b" option
		specifies a number of lines to be kept in the created window's
		scroll-back buffer.  e.g. "-b30" specifies that 30 lines
		should be kept in the buffer.  If "-b" is not specified, the
		default buffer size is used.  "-b0" may be used to turn off
		the scroll-back buffer.  This script is more fully documented
		by comments at the top of it.  If "termtype" is vtansi, then
		the TERM environment variable in the window will be set to
		"ansi", and the TERMCAP variable will be synthesized from the
		VT100 termcap entry, which may give better capabilities.

		Usage: uwrun [-s] [-wtermtype] [-blines] [-p] [cmd [arg ...]]

	uwcmd	A front-end to uwtool and uwrun to run a command in a window,
		while fixing the terminal types as necessary.  The title of
		the window is set to the name of the command to be performed,
		together with its arguments.  By default the window is popped
		up to become the current window, unless the "-n" option is
		given on the command-line.  Both uwtool and uwrun must be on
		the user's PATH to make use of this script.  If "-0" is
		given and the "-b" option is not given, then an implicit
		"-b0" option is impled.  The following two forms are equivalent
		but the second may be more convenient for scripts that call
		this script.

		Usage: uwcmd [-0] [-n] [-ttitle] [-s] [-wtermtype] [-blines]
				[cmd [arg ...]]
		   Or: uwcmd -ccmd [-0] [-n] [-ttitle] [-s] [-wtermtype]
		   		[-blines] [arg ...]

	uwvi	A front-end to uwcmd to run the user's editor on a list of
		files given on the command-line.  The editor used is defined
		by the EDITOR environment variable, or is set to "vi" if the
		EDITOR variable does not exist.  The uwcmd script must be on
		the user's PATH to make use of this script.  If "-b" is not
		given, then the effect is the same as "-b0".

		Usage: uwvi [-n] [-ttitle] [-wtermtype] [-blines] [file ...]

	uwsh	This is similar to uwvi, except it simply creates a shell in
		the window.  If "-b" is not given, then the default scroll-back
		buffer size will be used.  The environment variable SHELL is
		used to determine which shell is to be run.  This script can
		be used to create a new shell window from the remote host side,
		in a similar fashion to how ALT-N creates a new shell window
		from the UW/PC side.

		Usage: uwsh [-n] [-ttitle] [-wtermtype] [-blines] [arg ...]

	uwmore	This is similar to uwvi, except that it runs the user's default
		pager on the given files in the created window.  The pager is
		given by the PAGER environment variable, or is set to "more"
		if that variable is not set.  If "-b" is not given, the effect
		is the same as "-b0".

		Usage: uwmore [-n] [-ttitle] [-wtermtype] [-blines] [file ...]

	uwclock	A novelty script to display the current date and time in a
		window, and update it every 10 seconds.  It requires the
		command "clear" to be somewhere on the user's path to clear the
		window.  A waste of a good window if you ask me. :-)

		Usage: uwclock [-n] [-ttitle]

The uwvi, uwsh and uwmore scripts can form the basis for other scripts to run
commands in a window, by simply modifying the last few lines of the scripts.
Some of these scripts make use of the "/bin/echo" command to send escape
sequences to UW/PC with the "-n" echo command-line option.  If your "/bin/echo"
does not support "-n", you should edit the scripts to change it to a version
of echo that does.  It's not the end of the world if your echo does not have
"-n" - the scripts will still run, but there may be some extra spurious blank
lines around on the screen.

Sooner or later you will get sick of setting up your favourite windows every
time you start the server and will want to have them automatically created.
The ".uwrc" file in your home directory exists for this purpose.  It is similar
to the .xsession or .xinitrc file used by X/Windows.  You place commands in it
to be executed when the UW server starts up, and these commands in turn will
create all your windows for you.  For example:

	:
	uwtool -wansi -t"Shell Window 1" uwrun -wvtansi
	uwtool -wansi -t"Shell Window 2" uwrun -wvtansi
	uwtool -wansi -t"News Reader" uwrun -s -wvtansi nn
	uwclock -n -t"Clock"
	sleep 3

I've found that the most reliable way to make the .uwrc file work as intended
is to make it executable ("chmod +x .uwrc"), set the first line to ":" and
the last line to "sleep 3".  Other setups give mixed results, with the server
or windows sometimes exiting prematurely for no apparent reason.  Making it
executable and starting with the ':' line will force the server to run the
file using the Bourne shell /bin/sh.  Adding the "sleep 3" line allows the
system to settle after all the windows have been created, and seems to stop
the server exiting prematurely.

An alternative way to write the above example script that makes better use
of the shell scripts from SCRIPTS.TAR follows:

	:
	UWTERM=vtansi export UWTERM
	uwsh -n -t"Shell Window 1"
	uwsh -n -t"Shell Window 2"
	uwcmd -n -s -t"News Reader" nn
	uwclock -n -t"Clock"
	sleep 3

The "-s" option on the fifth line above tells "uwcmd" to wait 5 seconds after
the command terminates.  This is so that, if the command ("nn" in this case)
terminates quickly during the server startup (e.g. there is no news to be
read), then the command won't exit back to the server too quickly and thereby
cause UW/PC to get "over-anxious" and kill the server because there are no
other windows present (because they are still being created).  The "-s" option
and the "sleep 3" line smooths out the startup so that such race conditions
between windows being created and windows dying don't cause the server to be
killed prematurely.  Another use for the "-s" option is to wait after a
command terminates to give the user a chance to see what happened before the
window is killed and all evidence disappears.

Since the .uwrc file is simply a shell script, you should be able to do almost
anything in it to set up your windows just the way you like them.  In future
versions of UW/PC I hope to add other commands and special escape sequences
to the Windows 3.0 version to enable changing the size of a window, making the
window iconic, etc, under the control of the remote Unix host.

10. SPECIAL UW/PC ESCAPE SEQUENCES.

This section describes a number of special escape sequences that may be sent
from the remote host to UW/PC to cause special things to happen.  They are
all preceded by the two characters ESC and '|' and a single letter.  The letter
tells UW/PC what action is to be performed.  These commands are unique to
UW/PC and are not supported by any other Unix Windows client program.  Most
of the time you will not need to use these because the shell scripts described
in the previous section will generate most of them as required.  The currently
supported letters follow:

	S	Set the size of the scroll-back buffer in the window this
		command is written in.  The letter 'S' must followed by zero
		or more decimal digits, an optional CR character, and a
		terminating LF character.  If at least one digit is given,
		then the combined value is the number of lines the scroll-back
		buffer should be resized to (0 for no scroll-back buffer), and
		if there are no digits, then the default number of lines of
		scroll-back will be restored.  The "uwrun" and "uwscroll"
		scripts will generate this escape sequence.

	P	Pop-up the window this command is written in to the top and
		make it the current window.  The "uwrun" script will generate
		this escape sequence.

	T	Send a string of the form "stty rows n columns m" back to the
		remote host.  This is primarily for fixing the size that the
		Unix host thinks the window is.  The "uwsize" script will
		generate this escape sequence.

	t	Send a string of the form "TERM=xxx export TERM" back to the
		remote host, where "xxx" is the name of the terminal type in
		use by the window.  This is primarily for fixing the terminal
		type on the Unix side so it corresponds to the terminal type
		in use on the UW/PC side.  The "uwtype" script will generate
		this escape sequence.

	u	This is similar to the 't' command, except that sends back a
		string of the form "setenv TERM xxx" instead.  The "uwtype"
		script will generate this escape sequence if the SHELL
		environment variable indicates csh or tcsh.

It is expected that this set of commands will be expanded in future versions
of UW/PC.

11. LIMITATIONS

UW/PC and the UW server have a number of limitations.  Primarily, if
a large amount of output is appearing in one window, the UW server will
be slow to process input and output in another.  This is a limitation
of the UW server, and not UW/PC.  The second limitation is unavoidable.
With all serial communciations over telephone and other serial links,
errors in transmission are likely to occur.  The UW protocols have no
provision for error-free transmission of information, and especially
the special UW commands that are sent back and forth between UW/PC and
the UW server are not sent using an error-free transmission.  If errors
occur in the transmission of these commands, strange things like output
appearing in the wrong windows may result.  Since the UW commands are
fairly rare (usually only when swapping windows for input or output), and
the chances of normal data being corrupted into legal UW commands are
very small, very few problems should result on reasonably clean modem
connections.  As a last resort, you can press ALT-E to return to protocol
0, and if the UW server hasn't exited (because the exit command was
corrupted), you can press (while in protocol 0, not protocol 1) "CTRL-A"
followed by the "Delete" key (or the backspace key if the "swapbs"
configuration option is set to "on"), which corresponds to the UW exit
command, which should abort the UW server.

12. FUTURE WORK

In future, UW/PC will be extended with the following capabilities: A
mini-FTP protocol, scroll-back buffers, Ymodem file transfers in any
window (and also protocol 0), XON/XOFF flow control and support for a
subset of the UW protocol 2 features which gives more control over
window management.  Comments and suggestions are very welcome.  A major
project that is underway is a port to Windows 3.0.
